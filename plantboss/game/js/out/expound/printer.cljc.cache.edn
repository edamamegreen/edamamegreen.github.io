{:rename-macros {}, :renames {}, :externs {Error {}}, :use-macros {}, :excludes #{format}, :name expound.printer, :imports nil, :requires {string clojure.string, clojure.string clojure.string, s cljs.spec.alpha, cljs.spec.alpha cljs.spec.alpha, clojure.spec.alpha cljs.spec.alpha, pprint cljs.pprint, cljs.pprint cljs.pprint, clojure.pprint cljs.pprint}, :cljs.spec/speced-vars [expound.printer/indent expound.printer/pprint-str expound.printer/no-trailing-whitespace], :uses nil, :defs {indent-level {:name expound.printer/indent-level, :file "resources/public/js/out/expound/printer.cljc", :line 7, :column 1, :end-line 7, :end-column 18, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/expound/printer.cljc", :line 7, :column 6, :end-line 7, :end-column 18}, :tag number}, format {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/expound/printer.cljc", :line 10, :column 10, :end-line 10, :end-column 16, :arglists (quote ([fmt & args])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(fmt args)], :arglists ([fmt & args]), :arglists-meta (nil)}}, :name expound.printer/format, :variadic true, :file "resources/public/js/out/expound/printer.cljc", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(fmt args)], :arglists ([fmt & args]), :arglists-meta (nil)}, :method-params [(fmt args)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 10, :end-line 10, :max-fixed-arity 1, :fn-var true, :arglists ([fmt & args])}, pprint-str {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/expound/printer.cljc", :line 17, :column 7, :end-line 17, :end-column 17, :arglists (quote ([x])), :doc "Returns the pretty-printed string"}, :name expound.printer/pprint-str, :variadic false, :file "resources/public/js/out/expound/printer.cljc", :end-column 17, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns the pretty-printed string"}, no-trailing-whitespace {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/expound/printer.cljc", :line 25, :column 7, :end-line 25, :end-column 29, :arglists (quote ([s])), :doc "Given an potentially multi-line string, returns that string with all\n  trailing whitespace removed."}, :name expound.printer/no-trailing-whitespace, :variadic false, :file "resources/public/js/out/expound/printer.cljc", :end-column 29, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Given an potentially multi-line string, returns that string with all\n  trailing whitespace removed."}, indent {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/expound/printer.cljc", :line 43, :column 7, :end-line 43, :end-column 13, :arglists (quote ([s] [indent-level s] [first-line-indent rest-lines-indent s])), :doc "Given an potentially multi-line string, returns that string indented by\n   'indent-level' spaces. Optionally, can indent first line and other lines\n   different amounts.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s] [indent-level s] [first-line-indent rest-lines-indent s]), :arglists ([s] [indent-level s] [first-line-indent rest-lines-indent s]), :arglists-meta (nil nil nil)}}, :name expound.printer/indent, :variadic false, :file "resources/public/js/out/expound/printer.cljc", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s] [indent-level s] [first-line-indent rest-lines-indent s]), :arglists ([s] [indent-level s] [first-line-indent rest-lines-indent s]), :arglists-meta (nil nil nil)}, :method-params ([s] [indent-level s] [first-line-indent rest-lines-indent s]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 3, :fn-var true, :arglists ([s] [indent-level s] [first-line-indent rest-lines-indent s]), :doc "Given an potentially multi-line string, returns that string indented by\n   'indent-level' spaces. Optionally, can indent first line and other lines\n   different amounts."}}, :cljs.spec/registry-ref [[expound.printer/pprint-str (cljs.spec.alpha/fspec :args (cljs.spec.alpha/cat :x cljs.core/any?) :ret cljs.core/string?)] [expound.printer/no-trailing-whitespace (cljs.spec.alpha/fspec :args (cljs.spec.alpha/cat :s cljs.core/string?) :ret cljs.core/string?)] [expound.printer/indent (cljs.spec.alpha/fspec :args (cljs.spec.alpha/cat :first-line-indent-level (cljs.spec.alpha/? cljs.core/nat-int?) :indent-level (cljs.spec.alpha/? cljs.core/nat-int?) :s cljs.core/string?) :ret cljs.core/string?)]], :require-macros {s cljs.spec.alpha, cljs.spec.alpha cljs.spec.alpha, clojure.spec.alpha cljs.spec.alpha, pprint cljs.pprint, cljs.pprint cljs.pprint, clojure.pprint cljs.pprint}, :cljs.analyzer/constants {:seen #{:args expound.printer/indent :ret :first-line-indent-level cljs.spec.alpha/cat cljs.core/string? cljs.spec.alpha/fspec :s :stream expound.printer/pprint-str cljs.core/nat-int? :x :indent-level cljs.core/any? expound.printer/no-trailing-whitespace cljs.spec.alpha/?}, :order [expound.printer/pprint-str cljs.spec.alpha/fspec :args cljs.spec.alpha/cat :x cljs.core/any? :ret cljs.core/string? :stream expound.printer/no-trailing-whitespace :s expound.printer/indent :first-line-indent-level cljs.spec.alpha/? cljs.core/nat-int? :indent-level]}, :doc nil}