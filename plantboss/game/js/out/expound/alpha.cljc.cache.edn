{:rename-macros {}, :renames {}, :externs {Error {}}, :use-macros {}, :excludes #{}, :name expound.alpha, :imports nil, :requires {clojure.spec.alpha cljs.spec.alpha, expound.printer expound.printer, printer expound.printer, goog.string goog.string, problems expound.problems, paths expound.paths, goog.string.format goog.string.format, s cljs.spec.alpha, string clojure.string, clojure.string clojure.string, cljs.spec.alpha cljs.spec.alpha, expound.paths expound.paths, expound.problems expound.problems}, :cljs.spec/speced-vars [expound.alpha/specs expound.alpha/value-in-context], :uses nil, :defs {missing-key {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/expound/alpha.cljc", :line 164, :column 7, :end-line 164, :end-column 18, :arglists (quote ([form]))}, :name expound.alpha/missing-key, :variadic false, :file "resources/public/js/out/expound/alpha.cljc", :end-column 18, :method-params ([form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 164, :end-line 164, :max-fixed-arity 1, :fn-var true, :arglists (quote ([form]))}, spec-str {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/expound/alpha.cljc", :line 57, :column 7, :end-line 57, :end-column 15, :arglists (quote ([spec]))}, :name expound.alpha/spec-str, :variadic false, :file "resources/public/js/out/expound/alpha.cljc", :end-column 15, :method-params ([spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec]))}, custom-printer {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/expound/alpha.cljc", :line 404, :column 7, :end-line 404, :end-column 21, :arglists (quote ([opts])), :doc "Returns a printer, configured via opts"}, :name expound.alpha/custom-printer, :variadic false, :file "resources/public/js/out/expound/alpha.cljc", :end-column 21, :method-params ([opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 404, :end-line 404, :max-fixed-arity 1, :fn-var true, :arglists (quote ([opts])), :doc "Returns a printer, configured via opts"}, multi-spec-parts {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/expound/alpha.cljc", :line 200, :column 7, :end-line 200, :end-column 23, :arglists (quote ([spec]))}, :name expound.alpha/multi-spec-parts, :variadic false, :file "resources/public/js/out/expound/alpha.cljc", :end-column 23, :method-params ([spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 200, :end-line 200, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec]))}, pr-pred* {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/expound/alpha.cljc", :line 113, :column 7, :end-line 113, :end-column 15, :arglists (quote ([pred]))}, :name expound.alpha/pr-pred*, :variadic false, :file "resources/public/js/out/expound/alpha.cljc", :end-column 15, :method-params ([pred]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 113, :end-line 113, :max-fixed-arity 1, :fn-var true, :arglists (quote ([pred]))}, missing-spec? {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/expound/alpha.cljc", :line 204, :column 7, :end-line 204, :end-column 20, :arglists (quote ([problem]))}, :name expound.alpha/missing-spec?, :variadic false, :file "resources/public/js/out/expound/alpha.cljc", :end-column 20, :method-params ([problem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 204, :end-line 204, :max-fixed-arity 1, :fn-var true, :arglists (quote ([problem]))}, extra-input {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/expound/alpha.cljc", :line 157, :column 7, :end-line 157, :end-column 18, :arglists (quote ([spec-name val path]))}, :name expound.alpha/extra-input, :variadic false, :file "resources/public/js/out/expound/alpha.cljc", :end-column 18, :method-params ([spec-name val path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 157, :end-line 157, :max-fixed-arity 3, :fn-var true, :arglists (quote ([spec-name val path]))}, regex-failure? {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/expound/alpha.cljc", :line 229, :column 7, :end-line 229, :end-column 21, :arglists (quote ([problem]))}, :name expound.alpha/regex-failure?, :variadic false, :file "resources/public/js/out/expound/alpha.cljc", :end-column 21, :method-params ([problem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 229, :end-line 229, :max-fixed-arity 1, :fn-var true, :arglists (quote ([problem]))}, section-size {:name expound.alpha/section-size, :file "resources/public/js/out/expound/alpha.cljc", :line 26, :column 1, :end-line 26, :end-column 18, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/expound/alpha.cljc", :line 26, :column 6, :end-line 26, :end-column 18}, :tag number}, relevant-specs {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/expound/alpha.cljc", :line 189, :column 7, :end-line 189, :end-column 21, :arglists (quote ([problems]))}, :name expound.alpha/relevant-specs, :variadic false, :file "resources/public/js/out/expound/alpha.cljc", :end-column 21, :method-params ([problems]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 189, :end-line 189, :max-fixed-arity 1, :fn-var true, :arglists (quote ([problems]))}, printer {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/expound/alpha.cljc", :line 410, :column 7, :end-line 410, :end-column 14, :arglists (quote ([explain-data])), :doc "Prints explain-data in a human-readable format"}, :name expound.alpha/printer, :variadic false, :file "resources/public/js/out/expound/alpha.cljc", :end-column 14, :method-params ([explain-data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 410, :end-line 410, :max-fixed-arity 1, :fn-var true, :arglists (quote ([explain-data])), :doc "Prints explain-data in a human-readable format"}, section-label {:name expound.alpha/section-label, :file "resources/public/js/out/expound/alpha.cljc", :line 187, :column 1, :end-line 187, :end-column 19, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/expound/alpha.cljc", :line 187, :column 6, :end-line 187, :end-column 19}, :tag any}, spec-name {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/expound/alpha.cljc", :line 362, :column 7, :end-line 362, :end-column 16, :arglists (quote ([ed]))}, :name expound.alpha/spec-name, :variadic false, :file "resources/public/js/out/expound/alpha.cljc", :end-column 16, :method-params ([ed]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 362, :end-line 362, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ed]))}, pr-pred {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/expound/alpha.cljc", :line 124, :column 7, :end-line 124, :end-column 14, :arglists (quote ([pred spec]))}, :name expound.alpha/pr-pred, :variadic false, :file "resources/public/js/out/expound/alpha.cljc", :end-column 14, :method-params ([pred spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 124, :end-line 124, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pred spec]))}, value-in-context {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/expound/alpha.cljc", :line 38, :column 7, :end-line 38, :end-column 23, :arglists (quote ([opts spec-name form path value])), :doc "Given a form and a path into that form, returns a string\n   that helps the user understand where that path is located\n   in the form"}, :name expound.alpha/value-in-context, :variadic false, :file "resources/public/js/out/expound/alpha.cljc", :end-column 23, :method-params ([opts spec-name form path value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 5, :fn-var true, :arglists (quote ([opts spec-name form path value])), :doc "Given a form and a path into that form, returns a string\n   that helps the user understand where that path is located\n   in the form"}, specs-str {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/expound/alpha.cljc", :line 76, :column 7, :end-line 76, :end-column 16, :arglists (quote ([problems]))}, :name expound.alpha/specs-str, :variadic false, :file "resources/public/js/out/expound/alpha.cljc", :end-column 16, :method-params ([problems]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 76, :end-line 76, :max-fixed-arity 1, :fn-var true, :arglists (quote ([problems]))}, instrumentation-info {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/expound/alpha.cljc", :line 351, :column 7, :end-line 351, :end-column 27, :arglists (quote ([failure caller]))}, :name expound.alpha/instrumentation-info, :variadic false, :file "resources/public/js/out/expound/alpha.cljc", :end-column 27, :method-params ([failure caller]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 351, :end-line 351, :max-fixed-arity 2, :fn-var true, :arglists (quote ([failure caller]))}, *value-str-fn* {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/expound/alpha.cljc", :line 28, :column 16, :end-line 28, :end-column 30, :dynamic true}, :name expound.alpha/*value-str-fn*, :variadic false, :file "resources/public/js/out/expound/alpha.cljc", :end-column 30, :method-params ([_ _ _ _]), :protocol-impl nil, :arglists-meta (), :column 1, :dynamic true, :line 28, :end-line 28, :max-fixed-arity 4, :fn-var true, :arglists nil}, named? {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/expound/alpha.cljc", :line 83, :column 7, :end-line 83, :end-column 13, :arglists (quote ([x]))}, :name expound.alpha/named?, :variadic false, :file "resources/public/js/out/expound/alpha.cljc", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 83, :end-line 83, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, preds {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/expound/alpha.cljc", :line 140, :column 7, :end-line 140, :end-column 12, :arglists (quote ([problems]))}, :name expound.alpha/preds, :variadic false, :file "resources/public/js/out/expound/alpha.cljc", :end-column 12, :method-params ([problems]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 140, :end-line 140, :max-fixed-arity 1, :fn-var true, :arglists (quote ([problems]))}, expound-str {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/expound/alpha.cljc", :line 415, :column 7, :end-line 415, :end-column 18, :arglists (quote ([spec form])), :doc "Given a spec and a value, either returns success message or returns a human-readable explanation as a string."}, :name expound.alpha/expound-str, :variadic false, :file "resources/public/js/out/expound/alpha.cljc", :end-column 18, :method-params ([spec form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 415, :end-line 415, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec form])), :doc "Given a spec and a value, either returns success message or returns a human-readable explanation as a string."}, not-in-set? {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/expound/alpha.cljc", :line 207, :column 7, :end-line 207, :end-column 18, :arglists (quote ([problem]))}, :name expound.alpha/not-in-set?, :variadic false, :file "resources/public/js/out/expound/alpha.cljc", :end-column 18, :method-params ([problem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 207, :end-line 207, :max-fixed-arity 1, :fn-var true, :arglists (quote ([problem]))}, problem-group-str {:name expound.alpha/problem-group-str, :file "resources/public/js/out/expound/alpha.cljc", :line 249, :column 1, :end-line 249, :end-column 28, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/expound/alpha.cljc", :line 249, :column 11, :end-line 249, :end-column 28}, :tag cljs.core/MultiFn}, header-label {:name expound.alpha/header-label, :file "resources/public/js/out/expound/alpha.cljc", :line 186, :column 1, :end-line 186, :end-column 18, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/expound/alpha.cljc", :line 186, :column 6, :end-line 186, :end-column 18}, :tag any}, elide-core-ns {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/expound/alpha.cljc", :line 87, :column 7, :end-line 87, :end-column 20, :arglists (quote ([s]))}, :name expound.alpha/elide-core-ns, :variadic false, :file "resources/public/js/out/expound/alpha.cljc", :end-column 20, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, insufficient-input {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/expound/alpha.cljc", :line 146, :column 7, :end-line 146, :end-column 25, :arglists (quote ([spec-name val path problem]))}, :name expound.alpha/insufficient-input, :variadic false, :file "resources/public/js/out/expound/alpha.cljc", :end-column 25, :method-params ([spec-name val path problem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 146, :end-line 146, :max-fixed-arity 4, :fn-var true, :arglists (quote ([spec-name val path problem]))}, problem-type {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/expound/alpha.cljc", :line 326, :column 7, :end-line 326, :end-column 19, :arglists (quote ([problem]))}, :name expound.alpha/problem-type, :variadic false, :file "resources/public/js/out/expound/alpha.cljc", :end-column 19, :method-params ([problem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 326, :end-line 326, :max-fixed-arity 1, :fn-var true, :arglists (quote ([problem]))}, safe-sort-by {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/expound/alpha.cljc", :line 343, :column 7, :end-line 343, :end-column 19, :arglists (quote ([key-fn comp coll])), :doc "Same as sort-by, but if an error is raised, returns the original unsorted collection"}, :name expound.alpha/safe-sort-by, :variadic false, :file "resources/public/js/out/expound/alpha.cljc", :end-column 19, :method-params ([key-fn comp coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 343, :end-line 343, :max-fixed-arity 3, :fn-var true, :arglists (quote ([key-fn comp coll])), :doc "Same as sort-by, but if an error is raised, returns the original unsorted collection"}, missing-key? {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/expound/alpha.cljc", :line 210, :column 7, :end-line 210, :end-column 19, :arglists (quote ([problem]))}, :name expound.alpha/missing-key?, :variadic false, :file "resources/public/js/out/expound/alpha.cljc", :end-column 19, :method-params ([problem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 210, :end-line 210, :max-fixed-arity 1, :fn-var true, :arglists (quote ([problem]))}, pprint-fn {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/expound/alpha.cljc", :line 93, :column 7, :end-line 93, :end-column 16, :arglists (quote ([f]))}, :name expound.alpha/pprint-fn, :variadic false, :file "resources/public/js/out/expound/alpha.cljc", :end-column 16, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 93, :end-line 93, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f]))}, printer-str {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/expound/alpha.cljc", :line 367, :column 7, :end-line 367, :end-column 18, :arglists (quote ([opts explain-data]))}, :name expound.alpha/printer-str, :variadic false, :file "resources/public/js/out/expound/alpha.cljc", :end-column 18, :method-params ([opts explain-data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 367, :end-line 367, :max-fixed-arity 2, :fn-var true, :arglists (quote ([opts explain-data]))}, expound {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/expound/alpha.cljc", :line 429, :column 7, :end-line 429, :end-column 14, :arglists (quote ([spec form])), :doc "Given a spec and a value, either prints a success message or prints a human-readable explanation as a string."}, :name expound.alpha/expound, :variadic false, :file "resources/public/js/out/expound/alpha.cljc", :end-column 14, :method-params ([spec form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 429, :end-line 429, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec form])), :doc "Given a spec and a value, either prints a success message or prints a human-readable explanation as a string."}, label {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/expound/alpha.cljc", :line 178, :column 7, :end-line 178, :end-column 12, :arglists (quote ([size] [size s])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([size] [size s]), :arglists ([size] [size s]), :arglists-meta (nil nil)}}, :name expound.alpha/label, :variadic false, :file "resources/public/js/out/expound/alpha.cljc", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([size] [size s]), :arglists ([size] [size s]), :arglists-meta (nil nil)}, :method-params ([size] [size s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 178, :end-line 178, :max-fixed-arity 2, :fn-var true, :arglists ([size] [size s])}, no-method {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/expound/alpha.cljc", :line 232, :column 7, :end-line 232, :end-column 16, :arglists (quote ([spec-name val path problem]))}, :name expound.alpha/no-method, :variadic false, :file "resources/public/js/out/expound/alpha.cljc", :end-column 16, :method-params ([spec-name val path problem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 232, :end-line 232, :max-fixed-arity 4, :fn-var true, :arglists (quote ([spec-name val path problem]))}, specs {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/expound/alpha.cljc", :line 68, :column 7, :end-line 68, :end-column 12, :arglists (quote ([problems])), :doc "Given a collection of problems, returns the specs for those problems, with duplicates removed"}, :name expound.alpha/specs, :variadic false, :file "resources/public/js/out/expound/alpha.cljc", :end-column 12, :method-params ([problems]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 1, :fn-var true, :arglists (quote ([problems])), :doc "Given a collection of problems, returns the specs for those problems, with duplicates removed"}, show-spec-name {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/expound/alpha.cljc", :line 129, :column 7, :end-line 129, :end-column 21, :arglists (quote ([spec-name value]))}, :name expound.alpha/show-spec-name, :variadic false, :file "resources/public/js/out/expound/alpha.cljc", :end-column 21, :method-params ([spec-name value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 129, :end-line 129, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec-name value]))}, header-size {:name expound.alpha/header-size, :file "resources/public/js/out/expound/alpha.cljc", :line 25, :column 1, :end-line 25, :end-column 17, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/expound/alpha.cljc", :line 25, :column 6, :end-line 25, :end-column 17}, :tag number}}, :cljs.spec/registry-ref [[expound.alpha/specs (cljs.spec.alpha/fspec :args (cljs.spec.alpha/cat :problems :spec/problems) :ret :spec/specs)] [expound.alpha/value-in-context (cljs.spec.alpha/fspec :args (cljs.spec.alpha/cat :opts cljs.core/map? :spec-name (cljs.spec.alpha/nilable #{:args :ret :fn}) :form cljs.core/any? :path :expound/path :value cljs.core/any?) :ret cljs.core/string?)] [:expound.alpha/singleton (cljs.spec.alpha/coll-of cljs.core/any? :count 1)]], :require-macros {s cljs.spec.alpha, cljs.spec.alpha cljs.spec.alpha, clojure.spec.alpha cljs.spec.alpha}, :cljs.analyzer/constants {:seen #{:mm :args :cljs.spec.alpha/failure :path contains? :req-un :opt-un :expound/problems :spec-name :ret :cljs.spec.alpha/unknown :cljs.spec.alpha/value :gfn :spec/problems cljs.core/keyword? :pred-exprs :keys-pred any? :fn cljs.core/vector? :instrument :value-str-fn :opt-keys :pred :problems :else :problem/missing-spec cljs.spec.alpha/coll-of :spec/problem cljs.spec.alpha/cat expound.alpha/specs :cljs.spec.alpha/kind-form :default :via cljs.core/last :expound/form cljs.core/string? :req-specs :value :expound/caller :file :problem/unknown cljs.spec.alpha/fspec :spec.problem/via :val cljs.spec.alpha/nilable cljs.core/contains? cljs.core/map? :cljs.spec.alpha/cpred :retag :cljs.spec.alpha/problems % expound.alpha/value-in-context cljs.spec.alpha/keys :spec :reason :req :spec/specs :show-valid-values? problem :line :opts :kind :expound/path :count :req-keys cljs.core/fn :expound/in :opt-specs :problem/not-in-set :pred-forms :form :expound.alpha/singleton :problem/regex-failure :hierarchy :cljs.spec.alpha/fn :problem/missing-key :cljs.spec.alpha/conform-all cljs.core/any? :spec/spec :cljs.spec.alpha/describe :opt}, :order [:expound.alpha/singleton cljs.spec.alpha/coll-of cljs.core/any? :count any? :cljs.spec.alpha/kind-form :cljs.spec.alpha/cpred :cljs.spec.alpha/conform-all :cljs.spec.alpha/describe :spec/spec cljs.core/keyword? :spec/specs :spec.problem/via :kind cljs.core/vector? :spec/problem cljs.spec.alpha/keys :req-un :opt-un :gfn :pred-exprs :keys-pred :opt-keys :req-specs :req :req-keys :opt-specs :pred-forms :opt :via cljs.core/fn % cljs.core/map? cljs.core/contains? :spec/problems expound.alpha/value-in-context cljs.spec.alpha/fspec :args cljs.spec.alpha/cat :opts :spec-name cljs.spec.alpha/nilable :ret :fn :form :path :expound/path :value cljs.core/string? :expound/form :expound/in expound.alpha/specs :problems :else :cljs.spec.alpha/unknown :pred :spec contains? :mm :retag :reason :val cljs.core/last problem :hierarchy :default :problem/missing-key :problem/not-in-set :problem/missing-spec :problem/regex-failure :problem/unknown :instrument :file :line :cljs.spec.alpha/failure :cljs.spec.alpha/problems :value-str-fn :show-valid-values? :cljs.spec.alpha/fn :expound/caller :expound/problems :cljs.spec.alpha/value]}, :doc "Drop-in replacement for clojure.spec.alpha, with\n  human-readable `explain` function"}