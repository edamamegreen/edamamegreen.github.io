{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name clojure.test.check, :imports nil, :requires {gen clojure.test.check.generators, clojure.test.check.generators clojure.test.check.generators, random clojure.test.check.random, clojure.test.check.random clojure.test.check.random, results clojure.test.check.results, clojure.test.check.results clojure.test.check.results, rose clojure.test.check.rose-tree, clojure.test.check.rose-tree clojure.test.check.rose-tree, clojure.test.check.impl clojure.test.check.impl}, :cljs.spec/speced-vars [], :uses {exception-like? clojure.test.check.impl, get-current-time-millis clojure.test.check.impl}, :defs {shrink-loop {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check.cljc", :line 117, :column 8, :end-line 117, :end-column 19, :private true, :arglists (quote ([rose-tree reporter-fn])), :doc "Shrinking a value produces a sequence of smaller values of the same type.\n  Each of these values can then be shrunk. Think of this as a tree. We do a\n  modified depth-first search of the tree:\n\n  Do a non-exhaustive search for a deeper (than the root) failing example.\n  Additional rules added to depth-first search:\n  * If a node passes the property, you may continue searching at this depth,\n  but not backtrack\n  * If a node fails the property, search its children\n  The value returned is the left-most failing example at the depth where a\n  passing example was found.\n\n  Calls reporter-fn on every shrink step."}, :private true, :name clojure.test.check/shrink-loop, :variadic false, :file "resources/public/js/out/clojure/test/check.cljc", :end-column 19, :method-params ([rose-tree reporter-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 117, :end-line 117, :max-fixed-arity 2, :fn-var true, :arglists (quote ([rose-tree reporter-fn])), :doc "Shrinking a value produces a sequence of smaller values of the same type.\n  Each of these values can then be shrunk. Think of this as a tree. We do a\n  modified depth-first search of the tree:\n\n  Do a non-exhaustive search for a deeper (than the root) failing example.\n  Additional rules added to depth-first search:\n  * If a node passes the property, you may continue searching at this depth,\n  but not backtrack\n  * If a node fails the property, search its children\n  The value returned is the left-most failing example at the depth where a\n  passing example was found.\n\n  Calls reporter-fn on every shrink step."}, failure {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check.cljc", :line 165, :column 8, :end-line 165, :end-column 15, :private true, :arglists (quote ([property failing-rose-tree trial-number size seed reporter-fn]))}, :private true, :name clojure.test.check/failure, :variadic false, :file "resources/public/js/out/clojure/test/check.cljc", :end-column 15, :method-params ([property failing-rose-tree trial-number size seed reporter-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 165, :end-line 165, :max-fixed-arity 6, :fn-var true, :arglists (quote ([property failing-rose-tree trial-number size seed reporter-fn]))}, make-rng {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check.cljc", :line 20, :column 8, :end-line 20, :end-column 16, :private true, :arglists (quote ([seed]))}, :private true, :name clojure.test.check/make-rng, :variadic false, :file "resources/public/js/out/clojure/test/check.cljc", :end-column 16, :method-params ([seed]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists (quote ([seed]))}, complete {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check.cljc", :line 27, :column 8, :end-line 27, :end-column 16, :private true, :arglists (quote ([property num-trials seed reporter-fn]))}, :private true, :name clojure.test.check/complete, :variadic false, :file "resources/public/js/out/clojure/test/check.cljc", :end-column 16, :method-params ([property num-trials seed reporter-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 4, :fn-var true, :arglists (quote ([property num-trials seed reporter-fn]))}, quick-check {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check.cljc", :line 37, :column 7, :end-line 37, :end-column 18, :arglists (quote ([num-tests property & {:keys [seed max-size reporter-fn], :or {max-size 200, reporter-fn (constantly nil)}}])), :doc "Tests `property` `num-tests` times.\n\n  Takes several optional keys:\n\n  `:seed`\n    Can be used to re-run previous tests, as the seed used is returned\n    after a test is run.\n\n  `:max-size`.\n    can be used to control the 'size' of generated values. The size will\n    start at 0, and grow up to max-size, as the number of tests increases.\n    Generators will use the size parameter to bound their growth. This\n    prevents, for example, generating a five-thousand element vector on\n    the very first test.\n\n  `:reporter-fn`\n    A callback function that will be called at various points in the test\n    run, with a map like:\n\n      ;; called after a passing trial\n      {:type      :trial\n       :property  #<...>\n       :so-far    <number of tests run so far>\n       :num-tests <total number of tests>}\n\n      ;; called after each failing trial\n      {:type         :failure\n       :property     #<...>\n       :result       ...\n       :trial-number <tests ran before failure found>\n       :failing-args [...]}\n\n    It will also be called on :complete, :shrink-step and :shrunk.\n\n  Examples:\n\n      (def p (for-all [a gen/pos-int] (> (* a a) a)))\n\n      (quick-check 100 p)\n      (quick-check 200 p\n                   :seed 42\n                   :max-size 50\n                   :reporter-fn (fn [m]\n                                  (when (= :failure (:type m))\n                                    (println \"Uh oh...\"))))", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(num-tests property {:keys [seed max-size reporter-fn], :or {max-size 200, reporter-fn (constantly nil)}})], :arglists ([num-tests property & {:keys [seed max-size reporter-fn], :or {max-size 200, reporter-fn (constantly nil)}}]), :arglists-meta (nil)}}, :name clojure.test.check/quick-check, :variadic true, :file "resources/public/js/out/clojure/test/check.cljc", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(num-tests property {:keys [seed max-size reporter-fn], :or {max-size 200, reporter-fn (constantly nil)}})], :arglists ([num-tests property & {:keys [seed max-size reporter-fn], :or {max-size 200, reporter-fn (constantly nil)}}]), :arglists-meta (nil)}, :method-params [(num-tests property {:keys [seed max-size reporter-fn], :or {max-size 200, reporter-fn (constantly nil)}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 2, :fn-var true, :arglists ([num-tests property & {:keys [seed max-size reporter-fn], :or {max-size 200, reporter-fn (constantly nil)}}]), :doc "Tests `property` `num-tests` times.\n\n  Takes several optional keys:\n\n  `:seed`\n    Can be used to re-run previous tests, as the seed used is returned\n    after a test is run.\n\n  `:max-size`.\n    can be used to control the 'size' of generated values. The size will\n    start at 0, and grow up to max-size, as the number of tests increases.\n    Generators will use the size parameter to bound their growth. This\n    prevents, for example, generating a five-thousand element vector on\n    the very first test.\n\n  `:reporter-fn`\n    A callback function that will be called at various points in the test\n    run, with a map like:\n\n      ;; called after a passing trial\n      {:type      :trial\n       :property  #<...>\n       :so-far    <number of tests run so far>\n       :num-tests <total number of tests>}\n\n      ;; called after each failing trial\n      {:type         :failure\n       :property     #<...>\n       :result       ...\n       :trial-number <tests ran before failure found>\n       :failing-args [...]}\n\n    It will also be called on :complete, :shrink-step and :shrunk.\n\n  Examples:\n\n      (def p (for-all [a gen/pos-int] (> (* a a) a)))\n\n      (quick-check 100 p)\n      (quick-check 200 p\n                   :seed 42\n                   :max-size 50\n                   :reporter-fn (fn [m]\n                                  (when (= :failure (:type m))\n                                    (println \"Uh oh...\"))))"}, smallest-shrink {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check.cljc", :line 108, :column 8, :end-line 108, :end-column 23, :private true, :arglists (quote ([total-nodes-visited depth smallest]))}, :private true, :name clojure.test.check/smallest-shrink, :variadic false, :file "resources/public/js/out/clojure/test/check.cljc", :end-column 23, :method-params ([total-nodes-visited depth smallest]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 108, :end-line 108, :max-fixed-arity 3, :fn-var true, :arglists (quote ([total-nodes-visited depth smallest]))}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{:args :shrunk :total-nodes-visited :failure :property :shrink-step :num-tests :type :max-size :seed :trial-number :fail :result :result-data :smallest :trial :failing-size :reporter-fn :pass? :depth :complete :current-smallest :failing-args :so-far}, :order [:type :property :result :num-tests :seed :complete :max-size :reporter-fn :args :so-far :trial :total-nodes-visited :depth :result-data :smallest :shrink-step :pass? :current-smallest :trial-number :failing-args :failure :shrunk :failing-size :fail]}, :doc nil}