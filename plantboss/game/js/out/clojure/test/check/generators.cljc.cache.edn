{:rename-macros {}, :renames {}, :externs {Error {}, Number {POSITIVE_INFINITY {}, NEGATIVE_INFINITY {}, MAX_VALUE {}, NaN {}}, Math {pow {}, LOG2E {}}, isNaN {}}, :use-macros {}, :excludes #{uuid set namespace boolean map char shuffle let double int symbol sorted-set vector not-empty list keyword hash-map byte sequence bytes}, :name clojure.test.check.generators, :imports nil, :requires {core cljs.core, cljs.core cljs.core, random clojure.test.check.random, clojure.test.check.random clojure.test.check.random, rose clojure.test.check.rose-tree, clojure.test.check.rose-tree clojure.test.check.rose-tree, gstring goog.string, goog.string goog.string, clojure.string clojure.string}, :cljs.spec/speced-vars [], :uses nil, :defs {coll-distinct-by* {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 660, :column 17, :end-line 660, :end-column 34, :private true, :arglists (quote ([empty-coll key-fn shuffle-fn gen rng size num-elements min-elements max-tries ex-fn])), :doc "Returns a rose tree."}, :private true, :name clojure.test.check.generators/coll-distinct-by*, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 34, :method-params ([empty-coll key-fn shuffle-fn gen rng size num-elements min-elements max-tries ex-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 660, :end-line 660, :max-fixed-arity 10, :fn-var true, :arglists (quote ([empty-coll key-fn shuffle-fn gen rng size num-elements min-elements max-tries ex-fn])), :doc "Returns a rose tree."}, gen-fmap {:no-doc true, :protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 51, :column 7, :end-line 51, :end-column 15, :arglists (quote ([k {h :gen}])), :doc "Internal function.", :no-doc true}, :name clojure.test.check.generators/gen-fmap, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 15, :method-params ([k p__48303]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 2, :fn-var true, :arglists (quote ([k {h :gen}])), :doc "Internal function."}, uuid {:meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 1419, :column 24, :end-line 1419, :end-column 28, :added "0.9.0"}, :added "0.9.0", :name clojure.test.check.generators/uuid, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 28, :column 1, :line 1419, :end-line 1419, :tag any, :doc "Generates a random type-4 UUID. Does not shrink."}, set {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 873, :column 7, :end-line 873, :end-column 10, :arglists (quote ([gen] [gen opts])), :doc "Generates a set of elements from the given generator.\n\n  If the generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as `such-that`.\n\n  Available options:\n\n    :num-elements  the fixed size of generated set\n    :min-elements  the min size of generated set\n    :max-elements  the max size of generated set\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)\n    :ex-fn         a function of one arg that will be called if test.check cannot\n                   generate enough distinct values; it will be passed a map with\n                   `:gen`, `:num-elements`, and `:max-tries` and should return an\n                   exception", :added "0.9.0", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([gen] [gen opts]), :arglists ([gen] [gen opts]), :arglists-meta (nil nil)}}, :added "0.9.0", :name clojure.test.check.generators/set, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([gen] [gen opts]), :arglists ([gen] [gen opts]), :arglists-meta (nil nil)}, :method-params ([gen] [gen opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 873, :end-line 873, :max-fixed-arity 2, :fn-var true, :arglists ([gen] [gen opts]), :doc "Generates a set of elements from the given generator.\n\n  If the generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as `such-that`.\n\n  Available options:\n\n    :num-elements  the fixed size of generated set\n    :min-elements  the min size of generated set\n    :max-elements  the max size of generated set\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)\n    :ex-fn         a function of one arg that will be called if test.check cannot\n                   generate enough distinct values; it will be passed a map with\n                   `:gen`, `:num-elements`, and `:max-tries` and should return an\n                   exception"}, one-of {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 325, :column 7, :end-line 325, :end-column 13, :arglists (quote ([generators])), :doc "Create a generator that randomly chooses a value from the list of\n  provided generators. Shrinks toward choosing an earlier generator,\n  as well as shrinking the value generated by the chosen generator.\n\n      (gen/sample (gen/one-of [gen/int gen/boolean (gen/vector gen/int)]))\n      => (true [] -1 [0] [1 -4 -4 1] true 4 [] 6 true)"}, :name clojure.test.check.generators/one-of, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 13, :method-params ([generators]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 325, :end-line 325, :max-fixed-arity 1, :fn-var true, :arglists (quote ([generators])), :doc "Create a generator that randomly chooses a value from the list of\n  provided generators. Shrinks toward choosing an earlier generator,\n  as well as shrinking the value generated by the chosen generator.\n\n      (gen/sample (gen/one-of [gen/int gen/boolean (gen/vector gen/int)]))\n      => (true [] -1 [0] [1 -4 -4 1] true 4 [] 6 true)"}, uniform-integer {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 1056, :column 17, :end-line 1056, :end-column 32, :private true, :arglists (quote ([bit-count])), :doc "Generates an integer uniformly in the range 0..(2^bit-count-1)."}, :private true, :name clojure.test.check.generators/uniform-integer, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 32, :method-params ([bit-count]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1056, :end-line 1056, :max-fixed-arity 1, :fn-var true, :arglists (quote ([bit-count])), :doc "Generates an integer uniformly in the range 0..(2^bit-count-1)."}, char-keyword-first {:meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 1298, :column 16, :end-line 1298, :end-column 34, :private true}, :private true, :name clojure.test.check.generators/char-keyword-first, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 34, :column 1, :line 1298, :end-line 1298, :tag any, :doc "Generate characters that can be the first char of a keyword."}, any-printable {:name clojure.test.check.generators/any-printable, :file "resources/public/js/out/clojure/test/check/generators.cljc", :line 1584, :column 1, :end-line 1584, :end-column 19, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 1584, :column 6, :end-line 1584, :end-column 19}, :doc "Like any, but avoids characters that the shell will interpret as actions,\n  like 7 and 14 (bell and alternate character set command)", :tag any}, char-keyword-rest {:meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 1293, :column 16, :end-line 1293, :end-column 33, :private true}, :private true, :name clojure.test.check.generators/char-keyword-rest, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 33, :column 1, :line 1293, :end-line 1293, :tag any, :doc "Generate characters that can be the char following first of a keyword."}, large-integer** {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 985, :column 17, :end-line 985, :end-column 32, :private true, :arglists (quote ([min max])), :doc "Like large-integer*, but assumes range includes zero."}, :private true, :name clojure.test.check.generators/large-integer**, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 32, :method-params ([min max]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 985, :end-line 985, :max-fixed-arity 2, :fn-var true, :arglists (quote ([min max])), :doc "Like large-integer*, but assumes range includes zero."}, MIN_NEG_VALUE {:name clojure.test.check.generators/MIN_NEG_VALUE, :file "resources/public/js/out/clojure/test/check/generators.cljc", :line 1053, :column 1, :end-line 1053, :end-column 29, :private true, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 1053, :column 16, :end-line 1053, :end-column 29, :private true}, :tag number}, calc-long {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 219, :column 8, :end-line 219, :end-column 17, :private true, :arglists (quote ([factor lower upper]))}, :private true, :name clojure.test.check.generators/calc-long, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 17, :method-params ([factor lower upper]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 219, :end-line 219, :max-fixed-arity 3, :fn-var true, :arglists (quote ([factor lower upper]))}, vector-distinct {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 773, :column 7, :end-line 773, :end-column 22, :arglists (quote ([gen] [gen opts])), :doc "Generates a vector of elements from the given generator, with the\n  guarantee that the elements will be distinct.\n\n  If the generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as `such-that`.\n\n  Available options:\n\n    :num-elements  the fixed size of generated vectors\n    :min-elements  the min size of generated vectors\n    :max-elements  the max size of generated vectors\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)\n    :ex-fn         a function of one arg that will be called if test.check cannot\n                   generate enough distinct values; it will be passed a map with\n                   `:gen`, `:num-elements`, and `:max-tries` and should return an\n                   exception", :added "0.9.0", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([gen] [gen opts]), :arglists ([gen] [gen opts]), :arglists-meta (nil nil)}}, :added "0.9.0", :name clojure.test.check.generators/vector-distinct, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 22, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([gen] [gen opts]), :arglists ([gen] [gen opts]), :arglists-meta (nil nil)}, :method-params ([gen] [gen opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 773, :end-line 773, :max-fixed-arity 2, :fn-var true, :arglists ([gen] [gen opts]), :doc "Generates a vector of elements from the given generator, with the\n  guarantee that the elements will be distinct.\n\n  If the generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as `such-that`.\n\n  Available options:\n\n    :num-elements  the fixed size of generated vectors\n    :min-elements  the min size of generated vectors\n    :max-elements  the max size of generated vectors\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)\n    :ex-fn         a function of one arg that will be called if test.check cannot\n                   generate enough distinct values; it will be passed a map with\n                   `:gen`, `:num-elements`, and `:max-tries` and should return an\n                   exception"}, double-exp-and-sign {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 1123, :column 17, :end-line 1123, :end-column 36, :private true, :arglists (quote ([lower-bound upper-bound])), :doc "Generates [exp sign], where exp is in [-1023, 1023] and sign is 1\n  or -1. Only generates values for exp and sign for which there are\n  doubles within the given bounds."}, :private true, :name clojure.test.check.generators/double-exp-and-sign, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 36, :method-params ([lower-bound upper-bound]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1123, :end-line 1123, :max-fixed-arity 2, :fn-var true, :arglists (quote ([lower-bound upper-bound])), :doc "Generates [exp sign], where exp is in [-1023, 1023] and sign is 1\n  or -1. Only generates values for exp and sign for which there are\n  doubles within the given bounds."}, MIN_INTEGER {:name clojure.test.check.generators/MIN_INTEGER, :file "resources/public/js/out/clojure/test/check/generators.cljc", :line 957, :column 1, :end-line 957, :end-column 27, :private true, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 957, :column 16, :end-line 957, :end-column 27, :private true}, :tag number}, namespace {:meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 1344, :column 16, :end-line 1344, :end-column 25, :private true}, :private true, :name clojure.test.check.generators/namespace, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 25, :column 1, :line 1344, :end-line 1344, :tag any, :doc "Generate a namespace (or nil for no namespace)."}, boolean {:name clojure.test.check.generators/boolean, :file "resources/public/js/out/clojure/test/check/generators.cljc", :line 497, :column 1, :end-line 497, :end-column 13, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 497, :column 6, :end-line 497, :end-column 13}, :doc "Generates one of `true` or `false`. Shrinks to `false`.", :tag any}, list-distinct {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 798, :column 7, :end-line 798, :end-column 20, :arglists (quote ([gen] [gen opts])), :doc "Generates a list of elements from the given generator, with the\n  guarantee that the elements will be distinct.\n\n  If the generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as `such-that`.\n\n  Available options:\n\n    :num-elements  the fixed size of generated list\n    :min-elements  the min size of generated list\n    :max-elements  the max size of generated list\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)\n    :ex-fn         a function of one arg that will be called if test.check cannot\n                   generate enough distinct values; it will be passed a map with\n                   `:gen`, `:num-elements`, and `:max-tries` and should return an\n                   exception", :added "0.9.0", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([gen] [gen opts]), :arglists ([gen] [gen opts]), :arglists-meta (nil nil)}}, :added "0.9.0", :name clojure.test.check.generators/list-distinct, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([gen] [gen opts]), :arglists ([gen] [gen opts]), :arglists-meta (nil nil)}, :method-params ([gen] [gen opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 798, :end-line 798, :max-fixed-arity 2, :fn-var true, :arglists ([gen] [gen opts]), :doc "Generates a list of elements from the given generator, with the\n  guarantee that the elements will be distinct.\n\n  If the generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as `such-that`.\n\n  Available options:\n\n    :num-elements  the fixed size of generated list\n    :min-elements  the min size of generated list\n    :max-elements  the max size of generated list\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)\n    :ex-fn         a function of one arg that will be called if test.check cannot\n                   generate enough distinct values; it will be passed a map with\n                   `:gen`, `:num-elements`, and `:max-tries` and should return an\n                   exception"}, string-alphanumeric {:name clojure.test.check.generators/string-alphanumeric, :file "resources/public/js/out/clojure/test/check/generators.cljc", :line 1311, :column 1, :end-line 1311, :end-column 25, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 1311, :column 6, :end-line 1311, :end-column 25}, :doc "Generate alphanumeric strings.", :tag any}, map {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 921, :column 7, :end-line 921, :end-column 10, :arglists (quote ([key-gen val-gen] [key-gen val-gen opts])), :doc "Create a generator that generates maps, with keys chosen from\n  `key-gen` and values chosen from `val-gen`.\n\n  If the key generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as `such-that`.\n\n  Available options:\n\n    :num-elements  the fixed size of generated maps\n    :min-elements  the min size of generated maps\n    :max-elements  the max size of generated maps\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)\n    :ex-fn         a function of one arg that will be called if test.check cannot\n                   generate enough distinct keys; it will be passed a map with\n                   `:gen` (the key-gen), `:num-elements`, and `:max-tries` and\n                   should return an exception", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([key-gen val-gen] [key-gen val-gen opts]), :arglists ([key-gen val-gen] [key-gen val-gen opts]), :arglists-meta (nil nil)}}, :name clojure.test.check.generators/map, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([key-gen val-gen] [key-gen val-gen opts]), :arglists ([key-gen val-gen] [key-gen val-gen opts]), :arglists-meta (nil nil)}, :method-params ([key-gen val-gen] [key-gen val-gen opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 921, :end-line 921, :max-fixed-arity 3, :fn-var true, :arglists ([key-gen val-gen] [key-gen val-gen opts]), :doc "Create a generator that generates maps, with keys chosen from\n  `key-gen` and values chosen from `val-gen`.\n\n  If the key generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as `such-that`.\n\n  Available options:\n\n    :num-elements  the fixed size of generated maps\n    :min-elements  the min size of generated maps\n    :max-elements  the max size of generated maps\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)\n    :ex-fn         a function of one arg that will be called if test.check cannot\n                   generate enough distinct keys; it will be passed a map with\n                   `:gen` (the key-gen), `:num-elements`, and `:max-tries` and\n                   should return an exception"}, keyword-segment-rest {:meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 1350, :column 16, :end-line 1350, :end-column 36, :private true}, :private true, :name clojure.test.check.generators/keyword-segment-rest, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 36, :column 1, :line 1350, :end-line 1350, :tag any, :doc "Generate segments of a keyword (between \\:)"}, simple-type {:name clojure.test.check.generators/simple-type, :file "resources/public/js/out/clojure/test/check/generators.cljc", :line 1454, :column 1, :end-line 1454, :end-column 17, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 1454, :column 6, :end-line 1454, :end-column 17}, :tag any}, char {:name clojure.test.check.generators/char, :file "resources/public/js/out/clojure/test/check/generators.cljc", :line 1261, :column 1, :end-line 1261, :end-column 10, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 1261, :column 6, :end-line 1261, :end-column 10}, :doc "Generates character from 0-255.", :tag any}, pos-int {:name clojure.test.check.generators/pos-int, :file "resources/public/js/out/clojure/test/check/generators.cljc", :line 529, :column 1, :end-line 529, :end-column 13, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 529, :column 6, :end-line 529, :end-column 13}, :doc "Generate positive integers bounded by the generator's `size` parameter.", :tag any}, bind {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 122, :column 7, :end-line 122, :end-column 11, :arglists (quote ([generator f])), :doc "Create a new generator that passes the result of `gen` into function\n  `f`. `f` should return a new generator. This allows you to create new\n  generators that depend on the value of other generators. For example,\n  to create a generator of permutations which first generates a\n  `num-elements` and then generates a shuffling of `(range num-elements)`:\n\n      (gen/bind gen/nat\n                ;; this function takes a value generated by\n                ;; the generator above and returns a new generator\n                ;; which shuffles the collection returned by `range`\n                (fn [num-elements]\n                  (gen/shuffle (range num-elements))))\n\n  Also see gen/let for a macro with similar functionality."}, :name clojure.test.check.generators/bind, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 11, :method-params ([generator f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 122, :end-line 122, :max-fixed-arity 2, :fn-var true, :arglists (quote ([generator f])), :doc "Create a new generator that passes the result of `gen` into function\n  `f`. `f` should return a new generator. This allows you to create new\n  generators that depend on the value of other generators. For example,\n  to create a generator of permutations which first generates a\n  `num-elements` and then generates a shuffling of `(range num-elements)`:\n\n      (gen/bind gen/nat\n                ;; this function takes a value generated by\n                ;; the generator above and returns a new generator\n                ;; which shuffles the collection returned by `range`\n                (fn [num-elements]\n                  (gen/shuffle (range num-elements))))\n\n  Also see gen/let for a macro with similar functionality."}, symbol-ns {:meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 1403, :column 3, :end-line 1403, :end-column 12, :added "0.5.9"}, :added "0.5.9", :name clojure.test.check.generators/symbol-ns, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 12, :column 1, :line 1401, :end-line 1403, :tag any, :doc "Generate symbols with optional namespaces."}, any {:name clojure.test.check.generators/any, :file "resources/public/js/out/clojure/test/check/generators.cljc", :line 1580, :column 1, :end-line 1580, :end-column 9, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 1580, :column 6, :end-line 1580, :end-column 9}, :doc "A recursive generator that will generate many different, often nested, values", :tag any}, hashable? {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 1464, :column 20, :end-line 1464, :end-column 29, :private true, :arglists (quote ([x]))}, :private true, :name clojure.test.check.generators/hashable?, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 29, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 1464, :end-line 1464, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, shuffle {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 596, :column 3, :end-line 596, :end-column 10, :added "0.6.0", :arglists (quote ([coll])), :doc "Create a generator that generates random permutations of\n  `coll`. Shrinks toward the original collection: `coll`. `coll` will\n  be coerced to a vector."}, :added "0.6.0", :name clojure.test.check.generators/shuffle, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 10, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 594, :end-line 596, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc "Create a generator that generates random permutations of\n  `coll`. Shrinks toward the original collection: `coll`. `coll` will\n  be coerced to a vector."}, container-type {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 1472, :column 7, :end-line 1472, :end-column 21, :arglists (quote ([inner-type]))}, :name clojure.test.check.generators/container-type, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 21, :method-params ([inner-type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1472, :end-line 1472, :max-fixed-arity 1, :fn-var true, :arglists (quote ([inner-type]))}, char-symbol-rest {:name clojure.test.check.generators/char-symbol-rest, :file "resources/public/js/out/clojure/test/check/generators.cljc", :line 1388, :column 1, :end-line 1388, :end-column 32, :private true, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 1388, :column 16, :end-line 1388, :end-column 32, :private true}, :tag any}, long->large-integer {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 964, :column 17, :end-line 964, :end-column 36, :private true, :arglists (quote ([bit-count x min max]))}, :private true, :name clojure.test.check.generators/long->large-integer, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 36, :method-params ([bit-count x min max]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 964, :end-line 964, :max-fixed-arity 4, :fn-var true, :arglists (quote ([bit-count x min max]))}, s-pos-int {:name clojure.test.check.generators/s-pos-int, :file "resources/public/js/out/clojure/test/check/generators.cljc", :line 537, :column 1, :end-line 537, :end-column 15, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 537, :column 6, :end-line 537, :end-column 15}, :doc "Generate strictly positive integers bounded by the generator's `size` + 1", :tag any}, get-exponent {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 1105, :column 17, :end-line 1105, :end-column 29, :private true, :arglists (quote ([x]))}, :private true, :name clojure.test.check.generators/get-exponent, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 29, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1105, :end-line 1105, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, let {:protocol-inline nil, :meta {:added "0.9.0", :file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}, :column 11, :line 1592, :macro true, :end-line 1592, :arglists (quote ([bindings & body])), :doc "Macro for building generators using values from other generators.\n  Uses a binding vector with the same syntax as clojure.core/let,\n  where the right-hand side of the binding pairs are generators, and\n  the left-hand side are names (or destructuring forms) for generated\n  values.\n\n  Subsequent generator expressions can refer to the previously bound\n  values, in the same way as clojure.core/let.\n\n  Alternately, when the clauses are all independent, you can use a\n  map instead of a vector for the bindings. This will expand to\n  `tuple` instead of `bind`, which allows more effective shrinking.\n\n  The body of the let can be either a value or a generator, and does\n  the expected thing in either case. In this way let provides the\n  functionality of both `bind` and `fmap`.\n\n  Examples:\n\n    (gen/let [strs (gen/not-empty (gen/list gen/string))\n              s (gen/elements strs)]\n      {:some-strings strs\n       :one-of-those-strings s})\n\n    ;; map bindings for independent generators:\n    (gen/let {a gen/large-integer\n              b gen/large-integer}\n      (+' a b))\n\n    ;; generates collections of \"users\" that have integer IDs\n    ;; from 0...N-1, but are in a random order\n    (gen/let [users (gen/list (gen/hash-map :name gen/string-ascii\n                                            :age gen/nat))]\n      (->> users\n           (map #(assoc %2 :id %1) (range))\n           (gen/shuffle)))"}, :added "0.9.0", :name clojure.test.check.generators/let, :variadic true, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}, :method-params [(&form &env bindings body)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1592, :macro true, :end-line 1592, :max-fixed-arity 3, :fn-var false, :arglists ([&form &env bindings & body]), :doc "Macro for building generators using values from other generators.\n  Uses a binding vector with the same syntax as clojure.core/let,\n  where the right-hand side of the binding pairs are generators, and\n  the left-hand side are names (or destructuring forms) for generated\n  values.\n\n  Subsequent generator expressions can refer to the previously bound\n  values, in the same way as clojure.core/let.\n\n  Alternately, when the clauses are all independent, you can use a\n  map instead of a vector for the bindings. This will expand to\n  `tuple` instead of `bind`, which allows more effective shrinking.\n\n  The body of the let can be either a value or a generator, and does\n  the expected thing in either case. In this way let provides the\n  functionality of both `bind` and `fmap`.\n\n  Examples:\n\n    (gen/let [strs (gen/not-empty (gen/list gen/string))\n              s (gen/elements strs)]\n      {:some-strings strs\n       :one-of-those-strings s})\n\n    ;; map bindings for independent generators:\n    (gen/let {a gen/large-integer\n              b gen/large-integer}\n      (+' a b))\n\n    ;; generates collections of \"users\" that have integer IDs\n    ;; from 0...N-1, but are in a random order\n    (gen/let [users (gen/list (gen/hash-map :name gen/string-ascii\n                                            :age gen/nat))]\n      (->> users\n           (map #(assoc %2 :id %1) (range))\n           (gen/shuffle)))"}, double {:meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 1253, :column 24, :end-line 1253, :end-column 30, :added "0.9.0"}, :added "0.9.0", :name clojure.test.check.generators/double, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 30, :column 1, :line 1253, :end-line 1253, :tag any, :doc "Generates 64-bit floating point numbers from the entire range,\n  including +/- infinity and NaN. Use double* for more control."}, MAX_POS_VALUE {:name clojure.test.check.generators/MAX_POS_VALUE, :file "resources/public/js/out/clojure/test/check/generators.cljc", :line 1052, :column 1, :end-line 1052, :end-column 29, :private true, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 1052, :column 16, :end-line 1052, :end-column 29, :private true}, :tag js}, list-distinct-by {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 848, :column 7, :end-line 848, :end-column 23, :arglists (quote ([key-fn gen] [key-fn gen opts])), :doc "Generates a list of elements from the given generator, with the\n  guarantee that (map key-fn the-list) will be distinct.\n\n  If the generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as `such-that`.\n\n  Available options:\n\n    :num-elements  the fixed size of generated list\n    :min-elements  the min size of generated list\n    :max-elements  the max size of generated list\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)\n    :ex-fn         a function of one arg that will be called if test.check cannot\n                   generate enough distinct values; it will be passed a map with\n                   `:gen`, `:num-elements`, and `:max-tries` and should return an\n                   exception", :added "0.9.0", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([key-fn gen] [key-fn gen opts]), :arglists ([key-fn gen] [key-fn gen opts]), :arglists-meta (nil nil)}}, :added "0.9.0", :name clojure.test.check.generators/list-distinct-by, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 23, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([key-fn gen] [key-fn gen opts]), :arglists ([key-fn gen] [key-fn gen opts]), :arglists-meta (nil nil)}, :method-params ([key-fn gen] [key-fn gen opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 848, :end-line 848, :max-fixed-arity 3, :fn-var true, :arglists ([key-fn gen] [key-fn gen opts]), :doc "Generates a list of elements from the given generator, with the\n  guarantee that (map key-fn the-list) will be distinct.\n\n  If the generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as `such-that`.\n\n  Available options:\n\n    :num-elements  the fixed size of generated list\n    :min-elements  the min size of generated list\n    :max-elements  the max size of generated list\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)\n    :ex-fn         a function of one arg that will be called if test.check cannot\n                   generate enough distinct values; it will be passed a map with\n                   `:gen`, `:num-elements`, and `:max-tries` and should return an\n                   exception"}, block-bounds {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 1165, :column 17, :end-line 1165, :end-column 29, :private true, :arglists (quote ([exp sign])), :doc "Returns [low high], the smallest and largest numbers in the given\n  range."}, :private true, :name clojure.test.check.generators/block-bounds, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 29, :method-params ([exp sign]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1165, :end-line 1165, :max-fixed-arity 2, :fn-var true, :arglists (quote ([exp sign])), :doc "Returns [low high], the smallest and largest numbers in the given\n  range."}, char-alpha {:name clojure.test.check.generators/char-alpha, :file "resources/public/js/out/clojure/test/check/generators.cljc", :line 1283, :column 1, :end-line 1283, :end-column 16, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 1283, :column 6, :end-line 1283, :end-column 16}, :doc "Generate alpha characters.", :tag any}, generator? {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 28, :column 7, :end-line 28, :end-column 17, :arglists (quote ([x])), :doc "Test if `x` is a generator. Generators should be treated as opaque values."}, :name clojure.test.check.generators/generator?, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 17, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Test if `x` is a generator. Generators should be treated as opaque values."}, char-symbol-special {:meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 1289, :column 16, :end-line 1289, :end-column 35, :private true}, :private true, :name clojure.test.check.generators/char-symbol-special, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 35, :column 1, :line 1289, :end-line 1289, :tag any, :doc "Generate non-alphanumeric characters that can be in a symbol."}, sample-seq {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 150, :column 7, :end-line 150, :end-column 17, :arglists (quote ([generator] [generator max-size])), :doc "Return a sequence of realized values from `generator`.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([generator] [generator max-size]), :arglists ([generator] [generator max-size]), :arglists-meta (nil nil)}}, :name clojure.test.check.generators/sample-seq, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([generator] [generator max-size]), :arglists ([generator] [generator max-size]), :arglists-meta (nil nil)}, :method-params ([generator] [generator max-size]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 150, :end-line 150, :max-fixed-arity 2, :fn-var true, :arglists ([generator] [generator max-size]), :doc "Return a sequence of realized values from `generator`."}, int {:name clojure.test.check.generators/int, :file "resources/public/js/out/clojure/test/check/generators.cljc", :line 519, :column 1, :end-line 519, :end-column 9, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 519, :column 6, :end-line 519, :end-column 9}, :doc "Generates a positive or negative integer bounded by the generator's\n  `size` parameter.", :tag any}, gen-pure {:no-doc true, :protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 43, :column 7, :end-line 43, :end-column 15, :arglists (quote ([value])), :doc "Internal function.", :no-doc true}, :name clojure.test.check.generators/gen-pure, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 15, :method-params ([value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value])), :doc "Internal function."}, recursive-gen {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 1525, :column 3, :end-line 1525, :end-column 16, :added "0.5.9", :arglists (quote ([container-gen-fn scalar-gen])), :doc "This is a helper for writing recursive (tree-shaped) generators. The first\n  argument should be a function that takes a generator as an argument, and\n  produces another generator that 'contains' that generator. The vector function\n  in this namespace is a simple example. The second argument is a scalar\n  generator, like boolean. For example, to produce a tree of booleans:\n\n    (gen/recursive-gen gen/vector gen/boolean)\n\n  Vectors or maps either recurring or containing booleans or integers:\n\n    (gen/recursive-gen (fn [inner] (gen/one-of [(gen/vector inner)\n                                                (gen/map inner inner)]))\n                       (gen/one-of [gen/boolean gen/int]))\n\n  Note that raw scalar values will be generated as well. To prevent this, you\n  can wrap the returned generator with the function passed as the first arg,\n  e.g.:\n\n    (gen/vector (gen/recursive-gen gen/vector gen/boolean))"}, :added "0.5.9", :name clojure.test.check.generators/recursive-gen, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 16, :method-params ([container-gen-fn scalar-gen]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1523, :end-line 1525, :max-fixed-arity 2, :fn-var true, :arglists (quote ([container-gen-fn scalar-gen])), :doc "This is a helper for writing recursive (tree-shaped) generators. The first\n  argument should be a function that takes a generator as an argument, and\n  produces another generator that 'contains' that generator. The vector function\n  in this namespace is a simple example. The second argument is a scalar\n  generator, like boolean. For example, to produce a tree of booleans:\n\n    (gen/recursive-gen gen/vector gen/boolean)\n\n  Vectors or maps either recurring or containing booleans or integers:\n\n    (gen/recursive-gen (fn [inner] (gen/one-of [(gen/vector inner)\n                                                (gen/map inner inner)]))\n                       (gen/one-of [gen/boolean gen/int]))\n\n  Note that raw scalar values will be generated as well. To prevent this, you\n  can wrap the returned generator with the function passed as the first arg,\n  e.g.:\n\n    (gen/vector (gen/recursive-gen gen/vector gen/boolean))"}, char-alpha-numeric {:meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 1277, :column 3, :end-line 1277, :end-column 21, :deprecated "0.6.0"}, :name clojure.test.check.generators/char-alpha-numeric, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 21, :column 1, :line 1276, :deprecated "0.6.0", :end-line 1277, :tag any, :doc "Deprecated - use char-alphanumeric instead.\n\n  Generate alphanumeric characters."}, backwards-shrinking-significand {:meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 1096, :column 16, :end-line 1096, :end-column 47, :private true}, :private true, :name clojure.test.check.generators/backwards-shrinking-significand, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 47, :column 1, :line 1096, :end-line 1096, :tag any, :doc "Generates a 52-bit non-negative integer that shrinks toward having\n  fewer lower-order bits (and shrinks to 0 if possible)."}, return {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 103, :column 7, :end-line 103, :end-column 13, :arglists (quote ([value])), :doc "Create a generator that always returns `value`,\n  and never shrinks. You can think of this as\n  the `constantly` of generators. E.g.:\n\n      (gen/sample (gen/return 42))\n      => (42 42 42 42 42 42 42 42 42 42)"}, :name clojure.test.check.generators/return, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 13, :method-params ([value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 103, :end-line 103, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value])), :doc "Create a generator that always returns `value`,\n  and never shrinks. You can think of this as\n  the `constantly` of generators. E.g.:\n\n      (gen/sample (gen/return 42))\n      => (42 42 42 42 42 42 42 42 42 42)"}, gen-bind {:no-doc true, :protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 59, :column 7, :end-line 59, :end-column 15, :arglists (quote ([{h :gen} k])), :doc "Internal function.", :no-doc true}, :name clojure.test.check.generators/gen-bind, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 15, :method-params ([p__48306 k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{h :gen} k])), :doc "Internal function."}, scale {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 282, :column 7, :end-line 282, :end-column 12, :arglists (quote ([f generator])), :doc "Create a new generator that modifies the size parameter by the\n  given function. Intended to support generators with sizes that need\n  to grow at different rates compared to the normal linear scaling.\n\n      (gen/sample (gen/tuple (gen/scale #(/ % 10) gen/nat)\n                             gen/nat\n                             (gen/scale #(* % 10) gen/nat)))\n      => ([0 0 0]  [0 1 2]  [0 2 13] [0 1 6]  [0 1 23]\n          [0 2 42] [0 1 26] [0 1 12] [0 1 12] [0 0 3])", :added "0.8.0"}, :added "0.8.0", :name clojure.test.check.generators/scale, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 12, :method-params ([f generator]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 282, :end-line 282, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f generator])), :doc "Create a new generator that modifies the size parameter by the\n  given function. Intended to support generators with sizes that need\n  to grow at different rates compared to the normal linear scaling.\n\n      (gen/sample (gen/tuple (gen/scale #(/ % 10) gen/nat)\n                             gen/nat\n                             (gen/scale #(* % 10) gen/nat)))\n      => ([0 0 0]  [0 1 2]  [0 2 13] [0 1 6]  [0 1 23]\n          [0 2 42] [0 1 26] [0 1 12] [0 1 12] [0 0 3])"}, +-or---digit? {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 1327, :column 8, :end-line 1327, :end-column 21, :private true, :arglists (quote ([c d])), :doc "Returns true if c is \\+ or \\- and d is non-nil and a digit.\n\n  Symbols that start with +3 or -2 are not readable because they look\n  like numbers."}, :private true, :name clojure.test.check.generators/+-or---digit?, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 21, :method-params ([c d]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1327, :end-line 1327, :max-fixed-arity 2, :fn-var true, :arglists (quote ([c d])), :doc "Returns true if c is \\+ or \\- and d is non-nil and a digit.\n\n  Symbols that start with +3 or -2 are not readable because they look\n  like numbers."}, symbol {:name clojure.test.check.generators/symbol, :file "resources/public/js/out/clojure/test/check/generators.cljc", :line 1393, :column 1, :end-line 1393, :end-column 12, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 1393, :column 6, :end-line 1393, :end-column 12}, :doc "Generate symbols without namespaces.", :tag any}, such-that-helper {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 398, :column 8, :end-line 398, :end-column 24, :private true, :arglists (quote ([pred gen {:keys [ex-fn max-tries]} rng size]))}, :private true, :name clojure.test.check.generators/such-that-helper, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 24, :method-params ([pred gen p__48350 rng size]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 398, :end-line 398, :max-fixed-arity 5, :fn-var true, :arglists (quote ([pred gen {:keys [ex-fn max-tries]} rng size]))}, double-finite {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 1177, :column 17, :end-line 1177, :end-column 30, :private true, :arglists (quote ([lower-bound upper-bound]))}, :private true, :name clojure.test.check.generators/double-finite, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 30, :method-params ([lower-bound upper-bound]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1177, :end-line 1177, :max-fixed-arity 2, :fn-var true, :arglists (quote ([lower-bound upper-bound]))}, pick {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 340, :column 8, :end-line 340, :end-column 12, :private true, :arglists (quote ([likelihoods n])), :doc "Returns an index into the `likelihoods` sequence."}, :private true, :name clojure.test.check.generators/pick, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 12, :method-params ([likelihoods n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 340, :end-line 340, :max-fixed-arity 2, :fn-var true, :arglists (quote ([likelihoods n])), :doc "Returns an index into the `likelihoods` sequence."}, char-alphanumeric {:name clojure.test.check.generators/char-alphanumeric, :file "resources/public/js/out/clojure/test/check/generators.cljc", :line 1269, :column 1, :end-line 1269, :end-column 23, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 1269, :column 6, :end-line 1269, :end-column 23}, :doc "Generate alphanumeric characters.", :tag any}, make-size-range-seq {:no-doc true, :protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 144, :column 7, :end-line 144, :end-column 26, :arglists (quote ([max-size])), :doc "Internal function.", :no-doc true}, :name clojure.test.check.generators/make-size-range-seq, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 26, :method-params ([max-size]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 144, :end-line 144, :max-fixed-arity 1, :fn-var true, :arglists (quote ([max-size])), :doc "Internal function."}, choose {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 296, :column 7, :end-line 296, :end-column 13, :arglists (quote ([lower upper])), :doc "Create a generator that returns integer numbers in the range\n     `lower` to `upper`, inclusive.\n\n         (gen/sample (gen/choose 200 800))\n         => (331 241 593 339 643 718 688 473 247 694)"}, :name clojure.test.check.generators/choose, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 13, :method-params ([lower upper]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 296, :end-line 296, :max-fixed-arity 2, :fn-var true, :arglists (quote ([lower upper])), :doc "Create a generator that returns integer numbers in the range\n     `lower` to `upper`, inclusive.\n\n         (gen/sample (gen/choose 200 800))\n         => (331 241 593 339 643 718 688 473 247 694)"}, string-ascii {:name clojure.test.check.generators/string-ascii, :file "resources/public/js/out/clojure/test/check/generators.cljc", :line 1307, :column 1, :end-line 1307, :end-column 18, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 1307, :column 6, :end-line 1307, :end-column 18}, :doc "Generate ascii strings.", :tag any}, sorted-set {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 897, :column 7, :end-line 897, :end-column 17, :arglists (quote ([gen] [gen opts])), :doc "Generates a sorted set of elements from the given generator.\n\n  If the generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as `such-that`.\n\n  Available options:\n\n    :num-elements  the fixed size of generated set\n    :min-elements  the min size of generated set\n    :max-elements  the max size of generated set\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)\n    :ex-fn         a function of one arg that will be called if test.check cannot\n                   generate enough distinct values; it will be passed a map with\n                   `:gen`, `:num-elements`, and `:max-tries` and should return an\n                   exception", :added "0.9.0", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([gen] [gen opts]), :arglists ([gen] [gen opts]), :arglists-meta (nil nil)}}, :added "0.9.0", :name clojure.test.check.generators/sorted-set, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([gen] [gen opts]), :arglists ([gen] [gen opts]), :arglists-meta (nil nil)}, :method-params ([gen] [gen opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 897, :end-line 897, :max-fixed-arity 2, :fn-var true, :arglists ([gen] [gen opts]), :doc "Generates a sorted set of elements from the given generator.\n\n  If the generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as `such-that`.\n\n  Available options:\n\n    :num-elements  the fixed size of generated set\n    :min-elements  the min size of generated set\n    :max-elements  the max size of generated set\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)\n    :ex-fn         a function of one arg that will be called if test.check cannot\n                   generate enough distinct values; it will be passed a map with\n                   `:gen`, `:num-elements`, and `:max-tries` and should return an\n                   exception"}, make-gen {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 33, :column 8, :end-line 33, :end-column 16, :private true, :arglists (quote ([generator-fn]))}, :private true, :name clojure.test.check.generators/make-gen, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 16, :method-params ([generator-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([generator-fn]))}, Generator {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name clojure.test.check.generators/Generator, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 21, :type true, :column 12, :internal-ctor true, :line 26, :record true, :end-line 26, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, frequency {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 349, :column 7, :end-line 349, :end-column 16, :arglists (quote ([pairs])), :doc "Create a generator that chooses a generator from `pairs` based on the\n  provided likelihoods. The likelihood of a given generator being chosen is\n  its likelihood divided by the sum of all likelihoods. Shrinks toward\n  choosing an earlier generator, as well as shrinking the value generated\n  by the chosen generator.\n\n  Examples:\n\n      (gen/sample (gen/frequency [[5 gen/int] [3 (gen/vector gen/int)] [2 gen/boolean]]))\n      => (true [] -1 [0] [1 -4 -4 1] true 4 [] 6 true)"}, :name clojure.test.check.generators/frequency, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 16, :method-params ([pairs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 349, :end-line 349, :max-fixed-arity 1, :fn-var true, :arglists (quote ([pairs])), :doc "Create a generator that chooses a generator from `pairs` based on the\n  provided likelihoods. The likelihood of a given generator being chosen is\n  its likelihood divided by the sum of all likelihoods. Shrinks toward\n  choosing an earlier generator, as well as shrinking the value generated\n  by the chosen generator.\n\n  Examples:\n\n      (gen/sample (gen/frequency [[5 gen/int] [3 (gen/vector gen/int)] [2 gen/boolean]]))\n      => (true [] -1 [0] [1 -4 -4 1] true 4 [] 6 true)"}, double* {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 1211, :column 7, :end-line 1211, :end-column 14, :arglists (quote ([{:keys [infinite? NaN? min max], :or {infinite? true, NaN? true}}])), :doc "Generates a 64-bit floating point number. Options:\n\n    :infinite? - whether +/- infinity can be generated (default true)\n    :NaN?      - whether NaN can be generated (default true)\n    :min       - minimum value (inclusive, default none)\n    :max       - maximum value (inclusive, default none)\n\n  Note that the min/max options must be finite numbers. Supplying a\n  min precludes -Infinity, and supplying a max precludes +Infinity.", :added "0.9.0"}, :added "0.9.0", :name clojure.test.check.generators/double*, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 14, :method-params ([p__48485]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1211, :end-line 1211, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [infinite? NaN? min max], :or {infinite? true, NaN? true}}])), :doc "Generates a 64-bit floating point number. Options:\n\n    :infinite? - whether +/- infinity can be generated (default true)\n    :NaN?      - whether NaN can be generated (default true)\n    :min       - minimum value (inclusive, default none)\n    :max       - maximum value (inclusive, default none)\n\n  Note that the min/max options must be finite numbers. Supplying a\n  min precludes -Infinity, and supplying a max precludes +Infinity."}, generate {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 176, :column 7, :end-line 176, :end-column 15, :arglists (quote ([generator] [generator size] [generator size seed])), :doc "Returns a single sample value from the generator.\n\n  Note that this function is a dev helper and is not meant to be used\n  to build other generators.\n\n  Optional args:\n\n  - size: the abstract size parameter, defaults to 30\n  - seed: the seed for the random number generator, an integer", :added "0.8.0", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([generator] [generator size] [generator size seed]), :arglists ([generator] [generator size] [generator size seed]), :arglists-meta (nil nil nil)}}, :added "0.8.0", :name clojure.test.check.generators/generate, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([generator] [generator size] [generator size seed]), :arglists ([generator] [generator size] [generator size seed]), :arglists-meta (nil nil nil)}, :method-params ([generator] [generator size] [generator size seed]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 176, :end-line 176, :max-fixed-arity 3, :fn-var true, :arglists ([generator] [generator size] [generator size seed]), :doc "Returns a single sample value from the generator.\n\n  Note that this function is a dev helper and is not meant to be used\n  to build other generators.\n\n  Optional args:\n\n  - size: the abstract size parameter, defaults to 30\n  - seed: the seed for the random number generator, an integer"}, distinct-by? {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 702, :column 17, :end-line 702, :end-column 29, :private true, :arglists (quote ([f coll])), :doc "Like clojure.core/distinct? but takes a collection instead of varargs,\n  and returns true for empty collections."}, :private true, :name clojure.test.check.generators/distinct-by?, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 29, :method-params ([f coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 702, :end-line 702, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f coll])), :doc "Like clojure.core/distinct? but takes a collection instead of varargs,\n  and returns true for empty collections."}, sized {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 245, :column 7, :end-line 245, :end-column 12, :arglists (quote ([sized-gen])), :doc "Create a generator that depends on the size parameter.\n  `sized-gen` is a function that takes an integer and returns\n  a generator.\n\n      TODO: example"}, :name clojure.test.check.generators/sized, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 12, :method-params ([sized-gen]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 245, :end-line 245, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sized-gen])), :doc "Create a generator that depends on the size parameter.\n  `sized-gen` is a function that takes an integer and returns\n  a generator.\n\n      TODO: example"}, s-neg-int {:name clojure.test.check.generators/s-neg-int, :file "resources/public/js/out/clojure/test/check/generators.cljc", :line 541, :column 1, :end-line 541, :end-column 15, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 541, :column 6, :end-line 541, :end-column 15}, :doc "Generate strictly negative integers bounded by the generator's `size` + 1", :tag any}, nat {:name clojure.test.check.generators/nat, :file "resources/public/js/out/clojure/test/check/generators.cljc", :line 524, :column 1, :end-line 524, :end-column 9, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 524, :column 6, :end-line 524, :end-column 9}, :doc "Generates non-negative integers bounded by the generator's `size`\n  parameter. Shrinks to zero.", :tag any}, coll-distinct-by {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 727, :column 17, :end-line 727, :end-column 33, :private true, :arglists (quote ([empty-coll key-fn allows-dupes? ordered? gen {:keys [num-elements min-elements max-elements max-tries ex-fn], :or {max-tries 10, ex-fn (fn* [p1__48410#] (ex-info "Couldn't generate enough distinct elements!" p1__48410#))}}]))}, :private true, :name clojure.test.check.generators/coll-distinct-by, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 33, :method-params ([empty-coll key-fn allows-dupes? ordered? gen p__48417]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 727, :end-line 727, :max-fixed-arity 6, :fn-var true, :arglists (quote ([empty-coll key-fn allows-dupes? ordered? gen {:keys [num-elements min-elements max-elements max-tries ex-fn], :or {max-tries 10, ex-fn (fn* [p1__48410#] (ex-info "Couldn't generate enough distinct elements!" p1__48410#))}}]))}, resize-symbolish-generator {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 1360, :column 17, :end-line 1360, :end-column 43, :private true, :arglists (quote ([g])), :doc "Scales the sizing down on a keyword or symbol generator so as to\n  make it reasonable."}, :private true, :name clojure.test.check.generators/resize-symbolish-generator, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 43, :method-params ([g]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1360, :end-line 1360, :max-fixed-arity 1, :fn-var true, :arglists (quote ([g])), :doc "Scales the sizing down on a keyword or symbol generator so as to\n  make it reasonable."}, namespace-segment {:meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 1338, :column 16, :end-line 1338, :end-column 33, :private true}, :private true, :name clojure.test.check.generators/namespace-segment, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 33, :column 1, :line 1338, :end-line 1338, :tag any, :doc "Generate the segment of a namespace."}, the-shuffle-fn {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 709, :column 17, :end-line 709, :end-column 31, :private true, :arglists (quote ([rng coll])), :doc "Returns a shuffled version of coll according to the rng.\n\n  Note that this is not a generator, it is just a utility function."}, :private true, :name clojure.test.check.generators/the-shuffle-fn, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 31, :method-params ([rng coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 709, :end-line 709, :max-fixed-arity 2, :fn-var true, :arglists (quote ([rng coll])), :doc "Returns a shuffled version of coll according to the rng.\n\n  Note that this is not a generator, it is just a utility function."}, tuple {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 501, :column 7, :end-line 501, :end-column 12, :arglists (quote ([& generators])), :doc "Create a generator that returns a vector, whose elements are chosen\n  from the generators in the same position. The individual elements shrink\n  according to their generator, but the value will never shrink in count.\n\n  Examples:\n\n      (def t (tuple gen/int gen/boolean))\n      (sample t)\n      ;; => ([1 true] [2 true] [2 false] [1 false] [0 true] [-2 false] [-6 false]\n      ;; =>  [3 true] [-4 false] [9 true]))", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(generators)], :arglists ([& generators]), :arglists-meta (nil)}}, :name clojure.test.check.generators/tuple, :variadic true, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(generators)], :arglists ([& generators]), :arglists-meta (nil)}, :method-params [(generators)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 501, :end-line 501, :max-fixed-arity 0, :fn-var true, :arglists ([& generators]), :doc "Create a generator that returns a vector, whose elements are chosen\n  from the generators in the same position. The individual elements shrink\n  according to their generator, but the value will never shrink in count.\n\n  Examples:\n\n      (def t (tuple gen/int gen/boolean))\n      (sample t)\n      ;; => ([1 true] [2 true] [2 false] [1 false] [0 true] [-2 false] [-6 false]\n      ;; =>  [3 true] [-4 false] [9 true]))"}, lazy-random-states {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 70, :column 7, :end-line 70, :end-column 25, :arglists (quote ([rr])), :doc "Internal function.\n\n  Given a random number generator, returns an infinite lazy sequence\n  of random number generators."}, :name clojure.test.check.generators/lazy-random-states, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 25, :method-params ([rr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 1, :fn-var true, :arglists (quote ([rr])), :doc "Internal function.\n\n  Given a random number generator, returns an infinite lazy sequence\n  of random number generators."}, map->Generator {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 26, :column 12, :end-line 26, :end-column 21, :internal-ctor true, :factory :map, :arglists (quote ([G__48294]))}, :name clojure.test.check.generators/map->Generator, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 21, :method-params ([G__48294]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 26, :end-line 26, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__48294]))}, shrink-2 {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 490, :column 7, :end-line 490, :end-column 15, :arglists (quote ([gen])), :doc "Create a new generator like `gen`, but will consider nodes for shrinking\n  even if their parent passes the test (up to one additional level)."}, :name clojure.test.check.generators/shrink-2, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 15, :method-params ([gen]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 490, :end-line 490, :max-fixed-arity 1, :fn-var true, :arglists (quote ([gen])), :doc "Create a new generator like `gen`, but will consider nodes for shrinking\n  even if their parent passes the test (up to one additional level)."}, string-alpha-numeric {:meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 1316, :column 3, :end-line 1316, :end-column 23, :deprecated "0.6.0"}, :name clojure.test.check.generators/string-alpha-numeric, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 23, :column 1, :line 1315, :deprecated "0.6.0", :end-line 1316, :tag any, :doc "Deprecated - use string-alphanumeric instead.\n\n  Generate alphanumeric strings."}, resize {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 260, :column 7, :end-line 260, :end-column 13, :arglists (quote ([n generator])), :doc "Create a new generator with `size` always bound to `n`.\n\n      (gen/sample (gen/set (gen/resize 200 gen/double)))\n      => (#{}\n          #{-4.994772362980037E147}\n          #{-4.234418056487335E-146}\n          #{}\n          #{}\n          #{}\n          #{NaN}\n          #{8.142414100982609E-63}\n          #{-3.58429955903876E-159 2.8563794617604296E-154\n            4.1021360195776005E-100 1.9084564045332549E-38}\n          #{-2.1582818131881376E83 -5.8460065493236117E48 9.729260993803226E166})"}, :name clojure.test.check.generators/resize, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 13, :method-params ([n generator]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 260, :end-line 260, :max-fixed-arity 2, :fn-var true, :arglists (quote ([n generator])), :doc "Create a new generator with `size` always bound to `n`.\n\n      (gen/sample (gen/set (gen/resize 200 gen/double)))\n      => (#{}\n          #{-4.994772362980037E147}\n          #{-4.234418056487335E-146}\n          #{}\n          #{}\n          #{}\n          #{NaN}\n          #{8.142414100982609E-63}\n          #{-3.58429955903876E-159 2.8563794617604296E-154\n            4.1021360195776005E-100 1.9084564045332549E-38}\n          #{-2.1582818131881376E83 -5.8460065493236117E48 9.729260993803226E166})"}, digit? {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 1322, :column 8, :end-line 1322, :end-column 14, :private true, :arglists (quote ([d]))}, :private true, :name clojure.test.check.generators/digit?, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 14, :method-params ([d]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1322, :end-line 1322, :max-fixed-arity 1, :fn-var true, :arglists (quote ([d]))}, scalb {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 1075, :column 17, :end-line 1075, :end-column 22, :private true, :arglists (quote ([x exp]))}, :private true, :name clojure.test.check.generators/scalb, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 22, :method-params ([x exp]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1075, :end-line 1075, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x exp]))}, neg-int {:name clojure.test.check.generators/neg-int, :file "resources/public/js/out/clojure/test/check/generators.cljc", :line 533, :column 1, :end-line 533, :end-column 13, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 533, :column 6, :end-line 533, :end-column 13}, :doc "Generate negative integers bounded by the generator's `size` parameter.", :tag any}, string {:name clojure.test.check.generators/string, :file "resources/public/js/out/clojure/test/check/generators.cljc", :line 1303, :column 1, :end-line 1303, :end-column 12, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 1303, :column 6, :end-line 1303, :end-column 12}, :doc "Generate strings. May generate unprintable characters.", :tag any}, vector {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 545, :column 7, :end-line 545, :end-column 13, :arglists (quote ([generator] [generator num-elements] [generator min-elements max-elements])), :doc "Create a generator of vectors whose elements are chosen from\n  `generator`. The count of the vector will be bounded by the `size`\n  generator parameter.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([generator] [generator num-elements] [generator min-elements max-elements]), :arglists ([generator] [generator num-elements] [generator min-elements max-elements]), :arglists-meta (nil nil nil)}}, :name clojure.test.check.generators/vector, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([generator] [generator num-elements] [generator min-elements max-elements]), :arglists ([generator] [generator num-elements] [generator min-elements max-elements]), :arglists-meta (nil nil nil)}, :method-params ([generator] [generator num-elements] [generator min-elements max-elements]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 545, :end-line 545, :max-fixed-arity 3, :fn-var true, :arglists ([generator] [generator num-elements] [generator min-elements max-elements]), :doc "Create a generator of vectors whose elements are chosen from\n  `generator`. The count of the vector will be bounded by the `size`\n  generator parameter."}, large-integer {:meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 1019, :column 24, :end-line 1019, :end-column 37, :added "0.9.0"}, :added "0.9.0", :name clojure.test.check.generators/large-integer, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 37, :column 1, :line 1019, :end-line 1019, :tag any, :doc "Generates a platform-native integer from the full available range\n  (in clj, 64-bit Longs, and in cljs, numbers between -(2^53 - 1) and\n  (2^53 - 1)).\n\n  Use large-integer* for more control."}, keyword-ns {:meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 1376, :column 3, :end-line 1376, :end-column 13, :added "0.5.9"}, :added "0.5.9", :name clojure.test.check.generators/keyword-ns, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 13, :column 1, :line 1374, :end-line 1376, :tag any, :doc "Generate keywords with optional namespaces."}, not-empty {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 459, :column 7, :end-line 459, :end-column 16, :arglists (quote ([gen])), :doc "Modifies a generator so that it doesn't generate empty collections.\n\n  Examples:\n\n      ;; generate a vector of booleans, but never the empty vector\n      (gen/sample (gen/not-empty (gen/vector gen/boolean)))\n      => ([false]\n          [false false]\n          [false false]\n          [false false false]\n          [false false false false]\n          [false true true]\n          [true false false false]\n          [true]\n          [true true true false false true false]\n          [false true true true false true true true false])"}, :name clojure.test.check.generators/not-empty, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 16, :method-params ([gen]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 459, :end-line 459, :max-fixed-arity 1, :fn-var true, :arglists (quote ([gen])), :doc "Modifies a generator so that it doesn't generate empty collections.\n\n  Examples:\n\n      ;; generate a vector of booleans, but never the empty vector\n      (gen/sample (gen/not-empty (gen/vector gen/boolean)))\n      => ([false]\n          [false false]\n          [false false]\n          [false false false]\n          [false false false false]\n          [false true true]\n          [true false false false]\n          [true]\n          [true true true false false true false]\n          [false true true true false true true true false])"}, char-symbol-first {:name clojure.test.check.generators/char-symbol-first, :file "resources/public/js/out/clojure/test/check/generators.cljc", :line 1383, :column 1, :end-line 1383, :end-column 33, :private true, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 1383, :column 16, :end-line 1383, :end-column 33, :private true}, :tag any}, gen-raw-long {:meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 950, :column 16, :end-line 950, :end-column 28, :private true}, :private true, :name clojure.test.check.generators/gen-raw-long, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 28, :column 1, :line 950, :end-line 950, :tag any, :doc "Generates a single uniformly random long, does not shrink."}, NAN {:name clojure.test.check.generators/NAN, :file "resources/public/js/out/clojure/test/check/generators.cljc", :line 1054, :column 1, :end-line 1054, :end-column 19, :private true, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 1054, :column 16, :end-line 1054, :end-column 19, :private true}, :tag js}, elements {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 387, :column 7, :end-line 387, :end-column 15, :arglists (quote ([coll])), :doc "Create a generator that randomly chooses an element from `coll`.\n\n      (gen/sample (gen/elements [:foo :bar :baz]))\n      => (:foo :baz :baz :bar :foo :foo :bar :bar :foo :bar)"}, :name clojure.test.check.generators/elements, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 15, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 387, :end-line 387, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc "Create a generator that randomly chooses an element from `coll`.\n\n      (gen/sample (gen/elements [:foo :bar :baz]))\n      => (:foo :baz :baz :bar :foo :foo :bar :bar :foo :bar)"}, default-such-that-opts {:name clojure.test.check.generators/default-such-that-opts, :file "resources/public/js/out/clojure/test/check/generators.cljc", :line 411, :column 1, :end-line 412, :end-column 25, :private true, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 412, :column 3, :end-line 412, :end-column 25, :private true}, :tag cljs.core/IMap}, fifty-two-bit-reverse {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 1080, :column 17, :end-line 1080, :end-column 38, :private true, :arglists (quote ([n])), :doc "Bit-reverses an integer in the range [0, 2^52)."}, :private true, :name clojure.test.check.generators/fifty-two-bit-reverse, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 38, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1080, :end-line 1080, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Bit-reverses an integer in the range [0, 2^52)."}, POS_INFINITY {:name clojure.test.check.generators/POS_INFINITY, :file "resources/public/js/out/clojure/test/check/generators.cljc", :line 1050, :column 1, :end-line 1050, :end-column 28, :private true, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 1050, :column 16, :end-line 1050, :end-column 28, :private true}, :tag js}, sample {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 160, :column 7, :end-line 160, :end-column 13, :arglists (quote ([generator] [generator num-samples])), :doc "Return a sequence of `num-samples` (default 10)\n  realized values from `generator`.\n\n  The sequence starts with small values from the generator, which\n  probably do not reflect the variety of values that will be generated\n  during a longer test run.\n\n  Note that this function is a dev helper and is not meant to be used\n  to build other generators.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([generator] [generator num-samples]), :arglists ([generator] [generator num-samples]), :arglists-meta (nil nil)}}, :name clojure.test.check.generators/sample, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([generator] [generator num-samples]), :arglists ([generator] [generator num-samples]), :arglists-meta (nil nil)}, :method-params ([generator] [generator num-samples]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 160, :end-line 160, :max-fixed-arity 2, :fn-var true, :arglists ([generator] [generator num-samples]), :doc "Return a sequence of `num-samples` (default 10)\n  realized values from `generator`.\n\n  The sequence starts with small values from the generator, which\n  probably do not reflect the variety of values that will be generated\n  during a longer test run.\n\n  Note that this function is a dev helper and is not meant to be used\n  to build other generators."}, randomized {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 1513, :column 17, :end-line 1513, :end-column 27, :private true, :arglists (quote ([func])), :doc "Like sized, but passes an rng instead of a size."}, :private true, :name clojure.test.check.generators/randomized, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 27, :method-params ([func]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1513, :end-line 1513, :max-fixed-arity 1, :fn-var true, :arglists (quote ([func])), :doc "Like sized, but passes an rng instead of a size."}, NEG_INFINITY {:name clojure.test.check.generators/NEG_INFINITY, :file "resources/public/js/out/clojure/test/check/generators.cljc", :line 1051, :column 1, :end-line 1051, :end-column 28, :private true, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 1051, :column 16, :end-line 1051, :end-column 28, :private true}, :tag js}, list {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 578, :column 7, :end-line 578, :end-column 11, :arglists (quote ([generator])), :doc "Like `vector`, but generates lists."}, :name clojure.test.check.generators/list, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 11, :method-params ([generator]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 578, :end-line 578, :max-fixed-arity 1, :fn-var true, :arglists (quote ([generator])), :doc "Like `vector`, but generates lists."}, large-integer* {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 997, :column 7, :end-line 997, :end-column 21, :arglists (quote ([{:keys [min max]}])), :doc "Like large-integer, but accepts options:\n\n    :min  the minimum integer (inclusive)\n    :max  the maximum integer (inclusive)\n\n  Both :min and :max are optional.\n\n      (gen/sample (gen/large-integer* {:min 9000 :max 10000}))\n      => (9000 9001 9001 9002 9000 9003 9006 9030 9005 9044)", :added "0.9.0"}, :added "0.9.0", :name clojure.test.check.generators/large-integer*, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 21, :method-params ([p__48450]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 997, :end-line 997, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [min max]}])), :doc "Like large-integer, but accepts options:\n\n    :min  the minimum integer (inclusive)\n    :max  the maximum integer (inclusive)\n\n  Both :min and :max are optional.\n\n      (gen/sample (gen/large-integer* {:min 9000 :max 10000}))\n      => (9000 9001 9001 9002 9000 9003 9006 9030 9005 9044)"}, abs {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 960, :column 17, :end-line 960, :end-column 20, :private true, :arglists (quote ([x]))}, :private true, :name clojure.test.check.generators/abs, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 20, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 960, :end-line 960, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, keyword {:name clojure.test.check.generators/keyword, :file "resources/public/js/out/clojure/test/check/generators.cljc", :line 1367, :column 1, :end-line 1367, :end-column 13, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 1367, :column 6, :end-line 1367, :end-column 13}, :doc "Generate keywords without namespaces.", :tag any}, gen-tuple {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 81, :column 8, :end-line 81, :end-column 17, :private true, :arglists (quote ([gens])), :doc "Takes a collection of generators and returns a generator of vectors."}, :private true, :name clojure.test.check.generators/gen-tuple, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 17, :method-params ([gens]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 1, :fn-var true, :arglists (quote ([gens])), :doc "Takes a collection of generators and returns a generator of vectors."}, bind-helper {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 113, :column 8, :end-line 113, :end-column 19, :private true, :arglists (quote ([f]))}, :private true, :name clojure.test.check.generators/bind-helper, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 19, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 113, :end-line 113, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f]))}, hash-map {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 623, :column 7, :end-line 623, :end-column 15, :arglists (quote ([& kvs])), :doc "Like clojure.core/hash-map, except the values are generators.\n   Returns a generator that makes maps with the supplied keys and\n   values generated using the supplied generators.\n\n       (gen/sample (gen/hash-map :a gen/boolean :b gen/nat))\n       => ({:a false, :b 0}\n           {:a true,  :b 1}\n           {:a false, :b 2}\n           {:a true,  :b 2}\n           {:a false, :b 4}\n           {:a false, :b 2}\n           {:a true,  :b 3}\n           {:a true,  :b 4}\n           {:a false, :b 1}\n           {:a false, :b 0})", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(kvs)], :arglists ([& kvs]), :arglists-meta (nil)}}, :name clojure.test.check.generators/hash-map, :variadic true, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(kvs)], :arglists ([& kvs]), :arglists-meta (nil)}, :method-params [(kvs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 623, :end-line 623, :max-fixed-arity 0, :fn-var true, :arglists ([& kvs]), :doc "Like clojure.core/hash-map, except the values are generators.\n   Returns a generator that makes maps with the supplied keys and\n   values generated using the supplied generators.\n\n       (gen/sample (gen/hash-map :a gen/boolean :b gen/nat))\n       => ({:a false, :b 0}\n           {:a true,  :b 1}\n           {:a false, :b 2}\n           {:a true,  :b 2}\n           {:a false, :b 4}\n           {:a false, :b 2}\n           {:a true,  :b 3}\n           {:a true,  :b 4}\n           {:a false, :b 1}\n           {:a false, :b 0})"}, call-gen {:no-doc true, :protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 37, :column 7, :end-line 37, :end-column 15, :arglists (quote ([{generator-fn :gen} rnd size])), :doc "Internal function.", :no-doc true}, :name clojure.test.check.generators/call-gen, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 15, :method-params ([p__48300 rnd size]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 3, :fn-var true, :arglists (quote ([{generator-fn :gen} rnd size])), :doc "Internal function."}, rand-range {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 240, :column 8, :end-line 240, :end-column 18, :private true, :arglists (quote ([rnd lower upper]))}, :private true, :name clojure.test.check.generators/rand-range, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 18, :method-params ([rnd lower upper]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 240, :end-line 240, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rnd lower upper]))}, ratio {:name clojure.test.check.generators/ratio, :file "resources/public/js/out/clojure/test/check/generators.cljc", :line 1411, :column 1, :end-line 1411, :end-column 11, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 1411, :column 6, :end-line 1411, :end-column 11}, :doc "Generates a `clojure.lang.Ratio`. Shrinks toward 0. Not all values generated\n  will be ratios, as many values returned by `/` are not ratios.", :tag any}, transient-set-contains? {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 653, :column 17, :end-line 653, :end-column 40, :private true, :arglists (quote ([s k]))}, :private true, :name clojure.test.check.generators/transient-set-contains?, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 40, :method-params ([s k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 653, :end-line 653, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s k]))}, such-that {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 419, :column 7, :end-line 419, :end-column 16, :arglists (quote ([pred gen] [pred gen max-tries-or-opts])), :doc "Create a generator that generates values from `gen` that satisfy predicate\n  `pred`. Care is needed to ensure there is a high chance `gen` will satisfy\n  `pred`. By default, `such-that` will try 10 times to generate a value that\n  satisfies the predicate. If no value passes this predicate after this number\n  of iterations, a runtime exception will be thrown. Note also that each\n  time such-that retries, it will increase the size parameter.\n\n  Examples:\n\n      ;; generate non-empty vectors of integers\n      ;; (note, gen/not-empty does exactly this)\n      (gen/such-that not-empty (gen/vector gen/int))\n\n  You can customize `such-that` by passing an optional third argument, which can\n  either be an integer representing the maximum number of times test.check\n  will try to generate a value matching the predicate, or a map:\n\n      :max-tries  positive integer, the maximum number of tries (default 10)\n      :ex-fn      a function of one arg that will be called if test.check cannot\n                  generate a matching value; it will be passed a map with `:gen`,\n                  `:pred`, and `:max-tries` and should return an exception", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([pred gen] [pred gen max-tries-or-opts]), :arglists ([pred gen] [pred gen max-tries-or-opts]), :arglists-meta (nil nil)}}, :name clojure.test.check.generators/such-that, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([pred gen] [pred gen max-tries-or-opts]), :arglists ([pred gen] [pred gen max-tries-or-opts]), :arglists-meta (nil nil)}, :method-params ([pred gen] [pred gen max-tries-or-opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 419, :end-line 419, :max-fixed-arity 3, :fn-var true, :arglists ([pred gen] [pred gen max-tries-or-opts]), :doc "Create a generator that generates values from `gen` that satisfy predicate\n  `pred`. Care is needed to ensure there is a high chance `gen` will satisfy\n  `pred`. By default, `such-that` will try 10 times to generate a value that\n  satisfies the predicate. If no value passes this predicate after this number\n  of iterations, a runtime exception will be thrown. Note also that each\n  time such-that retries, it will increase the size parameter.\n\n  Examples:\n\n      ;; generate non-empty vectors of integers\n      ;; (note, gen/not-empty does exactly this)\n      (gen/such-that not-empty (gen/vector gen/int))\n\n  You can customize `such-that` by passing an optional third argument, which can\n  either be an integer representing the maximum number of times test.check\n  will try to generate a value matching the predicate, or a map:\n\n      :max-tries  positive integer, the maximum number of tries (default 10)\n      :ex-fn      a function of one arg that will be called if test.check cannot\n                  generate a matching value; it will be passed a map with `:gen`,\n                  `:pred`, and `:max-tries` and should return an exception"}, shrink-int {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 203, :column 8, :end-line 203, :end-column 18, :private true, :arglists (quote ([integer]))}, :private true, :name clojure.test.check.generators/shrink-int, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 18, :method-params ([integer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 203, :end-line 203, :max-fixed-arity 1, :fn-var true, :arglists (quote ([integer]))}, random-pseudofactoring {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 1495, :column 19, :end-line 1495, :end-column 41, :private true, :arglists (quote ([n rng])), :doc "Returns (not generates) a random collection of integers `xs`\n  greater than 1 such that (<= (apply * xs) n)."}, :private true, :name clojure.test.check.generators/random-pseudofactoring, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 41, :method-params ([n rng]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 1495, :end-line 1495, :max-fixed-arity 2, :fn-var true, :arglists (quote ([n rng])), :doc "Returns (not generates) a random collection of integers `xs`\n  greater than 1 such that (<= (apply * xs) n)."}, vector-distinct-by {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 823, :column 7, :end-line 823, :end-column 25, :arglists (quote ([key-fn gen] [key-fn gen opts])), :doc "Generates a vector of elements from the given generator, with the\n  guarantee that (map key-fn the-vector) will be distinct.\n\n  If the generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as `such-that`.\n\n  Available options:\n\n    :num-elements  the fixed size of generated vectors\n    :min-elements  the min size of generated vectors\n    :max-elements  the max size of generated vectors\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)\n    :ex-fn         a function of one arg that will be called if test.check cannot\n                   generate enough distinct values; it will be passed a map with\n                   `:gen`, `:num-elements`, and `:max-tries` and should return an\n                   exception", :added "0.9.0", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([key-fn gen] [key-fn gen opts]), :arglists ([key-fn gen] [key-fn gen opts]), :arglists-meta (nil nil)}}, :added "0.9.0", :name clojure.test.check.generators/vector-distinct-by, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 25, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([key-fn gen] [key-fn gen opts]), :arglists ([key-fn gen] [key-fn gen opts]), :arglists-meta (nil nil)}, :method-params ([key-fn gen] [key-fn gen opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 823, :end-line 823, :max-fixed-arity 3, :fn-var true, :arglists ([key-fn gen] [key-fn gen opts]), :doc "Generates a vector of elements from the given generator, with the\n  guarantee that (map key-fn the-vector) will be distinct.\n\n  If the generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as `such-that`.\n\n  Available options:\n\n    :num-elements  the fixed size of generated vectors\n    :min-elements  the min size of generated vectors\n    :max-elements  the max size of generated vectors\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)\n    :ex-fn         a function of one arg that will be called if test.check cannot\n                   generate enough distinct values; it will be passed a map with\n                   `:gen`, `:num-elements`, and `:max-tries` and should return an\n                   exception"}, swap {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 590, :column 8, :end-line 590, :end-column 12, :private true, :arglists (quote ([coll [i1 i2]]))}, :private true, :name clojure.test.check.generators/swap, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 12, :method-params ([coll p__48376]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 590, :end-line 590, :max-fixed-arity 2, :fn-var true, :arglists (quote ([coll [i1 i2]]))}, size->max-leaf-count {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 1487, :column 17, :end-line 1487, :end-column 37, :private true, :arglists (quote ([size]))}, :private true, :name clojure.test.check.generators/size->max-leaf-count, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 37, :method-params ([size]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1487, :end-line 1487, :max-fixed-arity 1, :fn-var true, :arglists (quote ([size]))}, int-rose-tree {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 207, :column 8, :end-line 207, :end-column 21, :private true, :arglists (quote ([value]))}, :private true, :name clojure.test.check.generators/int-rose-tree, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 21, :method-params ([value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 207, :end-line 207, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value]))}, fmap {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 91, :column 7, :end-line 91, :end-column 11, :arglists (quote ([f gen])), :doc "Returns a generator like `gen` but with values transformed by `f`.\n  E.g.:\n\n      (gen/sample (gen/fmap str gen/nat))\n      => (\"0\" \"1\" \"0\" \"1\" \"4\" \"3\" \"6\" \"6\" \"4\" \"2\")\n\n  Also see gen/let for a macro with similar functionality."}, :name clojure.test.check.generators/fmap, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 11, :method-params ([f gen]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 91, :end-line 91, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f gen])), :doc "Returns a generator like `gen` but with values transformed by `f`.\n  E.g.:\n\n      (gen/sample (gen/fmap str gen/nat))\n      => (\"0\" \"1\" \"0\" \"1\" \"4\" \"3\" \"6\" \"6\" \"4\" \"2\")\n\n  Also see gen/let for a macro with similar functionality."}, MAX_INTEGER {:name clojure.test.check.generators/MAX_INTEGER, :file "resources/public/js/out/clojure/test/check/generators.cljc", :line 955, :column 1, :end-line 955, :end-column 27, :private true, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 955, :column 16, :end-line 955, :end-column 27, :private true}, :tag number}, ->Generator {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 26, :column 12, :end-line 26, :end-column 21, :internal-ctor true, :factory :positional, :arglists (quote ([gen]))}, :name clojure.test.check.generators/->Generator, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 21, :method-params ([gen]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 26, :end-line 26, :max-fixed-arity 1, :fn-var true, :arglists (quote ([gen]))}, no-shrink {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 480, :column 7, :end-line 480, :end-column 16, :arglists (quote ([gen])), :doc "Create a new generator that is just like `gen`, except does not shrink\n  at all. This can be useful when shrinking is taking a long time or is not\n  applicable to the domain."}, :name clojure.test.check.generators/no-shrink, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 16, :method-params ([gen]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 480, :end-line 480, :max-fixed-arity 1, :fn-var true, :arglists (quote ([gen])), :doc "Create a new generator that is just like `gen`, except does not shrink\n  at all. This can be useful when shrinking is taking a long time or is not\n  applicable to the domain."}, char-ascii {:name clojure.test.check.generators/char-ascii, :file "resources/public/js/out/clojure/test/check/generators.cljc", :line 1265, :column 1, :end-line 1265, :end-column 16, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 1265, :column 6, :end-line 1265, :end-column 16}, :doc "Generate only ascii character.", :tag any}, keyword-segment-first {:meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 1355, :column 16, :end-line 1355, :end-column 37, :private true}, :private true, :name clojure.test.check.generators/keyword-segment-first, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 37, :column 1, :line 1355, :end-line 1355, :tag any, :doc "Generate segments of a keyword that can be first (between \\:)"}, simple-type-printable {:name clojure.test.check.generators/simple-type-printable, :file "resources/public/js/out/clojure/test/check/generators.cljc", :line 1458, :column 1, :end-line 1458, :end-column 27, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 1458, :column 6, :end-line 1458, :end-column 27}, :tag any}, halfs {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/generators.cljc", :line 199, :column 8, :end-line 199, :end-column 13, :private true, :arglists (quote ([n]))}, :private true, :name clojure.test.check.generators/halfs, :variadic false, :file "resources/public/js/out/clojure/test/check/generators.cljc", :end-column 13, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 199, :end-line 199, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}}, :cljs.spec/registry-ref [], :require-macros {core cljs.core, cljs.core cljs.core}, :cljs.analyzer/constants {:seen #{:max-tries :min clojure.test.check.generators/generator? :max-tries-or-opts :pred :else :gen do gen clojure.test.check.generators/bind if :infinite? cljs.core/let clojure.test.check.generators/let val__48551__auto__ :arg :max / cljs.core/fn clojure.test.check.generators/return :max-elements :ex-fn clojure.test.check.generators/tuple :num-elements :min-elements :NaN?}, :order [:gen gen :ex-fn :max-tries :pred :else :max-tries-or-opts :num-elements :min-elements :max-elements :min :max :infinite? :NaN? / cljs.core/let val__48551__auto__ do if clojure.test.check.generators/generator? clojure.test.check.generators/return clojure.test.check.generators/bind cljs.core/fn clojure.test.check.generators/let clojure.test.check.generators/tuple :arg]}, :doc nil}