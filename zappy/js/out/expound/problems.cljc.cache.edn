{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name expound.problems, :imports nil, :requires {clojure.spec.alpha cljs.spec.alpha, expound.printer expound.printer, printer expound.printer, walk clojure.walk, paths expound.paths, s cljs.spec.alpha, string clojure.string, clojure.string clojure.string, cljs.spec.alpha cljs.spec.alpha, clojure.walk clojure.walk, expound.paths expound.paths}, :cljs.spec/speced-vars [expound.problems/summary-form], :uses nil, :defs {adjust-in {:protocol-inline nil, :meta {:file "file:/Users/woot15/.m2/repository/expound/expound/0.3.1/expound-0.3.1.jar!/expound/problems.cljc", :line 70, :column 8, :end-line 70, :end-column 17, :private true, :arglists (quote ([form problem]))}, :private true, :name expound.problems/adjust-in, :variadic false, :file "file:/Users/woot15/.m2/repository/expound/expound/0.3.1/expound-0.3.1.jar!/expound/problems.cljc", :end-column 17, :method-params ([form problem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 2, :fn-var true, :arglists (quote ([form problem]))}, highlight-line {:protocol-inline nil, :meta {:file "file:/Users/woot15/.m2/repository/expound/expound/0.3.1/expound-0.3.1.jar!/expound/problems.cljc", :line 64, :column 7, :end-line 64, :end-column 21, :arglists (quote ([prefix replacement]))}, :name expound.problems/highlight-line, :variadic false, :file "file:/Users/woot15/.m2/repository/expound/expound/0.3.1/expound-0.3.1.jar!/expound/problems.cljc", :end-column 21, :method-params ([prefix replacement]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 2, :fn-var true, :arglists (quote ([prefix replacement]))}, value-in {:protocol-inline nil, :meta {:file "file:/Users/woot15/.m2/repository/expound/expound/0.3.1/expound-0.3.1.jar!/expound/problems.cljc", :line 117, :column 7, :end-line 117, :end-column 15, :arglists (quote ([form in])), :doc "Similar to get-in, but works with paths that reference map keys"}, :name expound.problems/value-in, :variadic false, :file "file:/Users/woot15/.m2/repository/expound/expound/0.3.1/expound-0.3.1.jar!/expound/problems.cljc", :end-column 15, :method-params ([form in]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 117, :end-line 117, :max-fixed-arity 2, :fn-var true, :arglists (quote ([form in])), :doc "Similar to get-in, but works with paths that reference map keys"}, leaf-only {:protocol-inline nil, :meta {:file "file:/Users/woot15/.m2/repository/expound/expound/0.3.1/expound-0.3.1.jar!/expound/problems.cljc", :line 86, :column 7, :end-line 86, :end-column 16, :arglists (quote ([problems])), :doc "Given a collection of problems, returns only those problems with data on the 'leaves' of the data"}, :name expound.problems/leaf-only, :variadic false, :file "file:/Users/woot15/.m2/repository/expound/expound/0.3.1/expound-0.3.1.jar!/expound/problems.cljc", :end-column 16, :method-params ([problems]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 86, :end-line 86, :max-fixed-arity 1, :fn-var true, :arglists (quote ([problems])), :doc "Given a collection of problems, returns only those problems with data on the 'leaves' of the data"}, adjust-path {:protocol-inline nil, :meta {:file "file:/Users/woot15/.m2/repository/expound/expound/0.3.1/expound-0.3.1.jar!/expound/problems.cljc", :line 73, :column 8, :end-line 73, :end-column 19, :private true, :arglists (quote ([failure problem]))}, :private true, :name expound.problems/adjust-path, :variadic false, :file "file:/Users/woot15/.m2/repository/expound/expound/0.3.1/expound-0.3.1.jar!/expound/problems.cljc", :end-column 19, :method-params ([failure problem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 2, :fn-var true, :arglists (quote ([failure problem]))}, annotate {:protocol-inline nil, :meta {:file "file:/Users/woot15/.m2/repository/expound/expound/0.3.1/expound-0.3.1.jar!/expound/problems.cljc", :line 98, :column 7, :end-line 98, :end-column 15, :arglists (quote ([explain-data]))}, :name expound.problems/annotate, :variadic false, :file "file:/Users/woot15/.m2/repository/expound/expound/0.3.1/expound-0.3.1.jar!/expound/problems.cljc", :end-column 15, :method-params ([explain-data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 98, :end-line 98, :max-fixed-arity 1, :fn-var true, :arglists (quote ([explain-data]))}, escape-replacement {:protocol-inline nil, :meta {:file "file:/Users/woot15/.m2/repository/expound/expound/0.3.1/expound-0.3.1.jar!/expound/problems.cljc", :line 137, :column 7, :end-line 137, :end-column 25, :arglists (quote ([pattern s]))}, :name expound.problems/escape-replacement, :variadic false, :file "file:/Users/woot15/.m2/repository/expound/expound/0.3.1/expound-0.3.1.jar!/expound/problems.cljc", :end-column 25, :method-params ([pattern s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 137, :end-line 137, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pattern s]))}, highlighted-value {:protocol-inline nil, :meta {:file "file:/Users/woot15/.m2/repository/expound/expound/0.3.1/expound-0.3.1.jar!/expound/problems.cljc", :line 143, :column 7, :end-line 143, :end-column 24, :arglists (quote ([opts problem])), :doc "Given a problem, returns a pretty printed\n   string that highlights the problem value"}, :name expound.problems/highlighted-value, :variadic false, :file "file:/Users/woot15/.m2/repository/expound/expound/0.3.1/expound-0.3.1.jar!/expound/problems.cljc", :end-column 24, :method-params ([opts problem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 143, :end-line 143, :max-fixed-arity 2, :fn-var true, :arglists (quote ([opts problem])), :doc "Given a problem, returns a pretty printed\n   string that highlights the problem value"}, add-spec {:protocol-inline nil, :meta {:file "file:/Users/woot15/.m2/repository/expound/expound/0.3.1/expound-0.3.1.jar!/expound/problems.cljc", :line 79, :column 8, :end-line 79, :end-column 16, :private true, :arglists (quote ([spec problem]))}, :private true, :name expound.problems/add-spec, :variadic false, :file "file:/Users/woot15/.m2/repository/expound/expound/0.3.1/expound-0.3.1.jar!/expound/problems.cljc", :end-column 16, :method-params ([spec problem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :end-line 79, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec problem]))}, summary-form {:protocol-inline nil, :meta {:file "file:/Users/woot15/.m2/repository/expound/expound/0.3.1/expound-0.3.1.jar!/expound/problems.cljc", :line 30, :column 7, :end-line 30, :end-column 19, :arglists (quote ([show-valid-values? form in]))}, :name expound.problems/summary-form, :variadic false, :file "file:/Users/woot15/.m2/repository/expound/expound/0.3.1/expound-0.3.1.jar!/expound/problems.cljc", :end-column 19, :method-params ([show-valid-values? form in]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 3, :fn-var true, :arglists (quote ([show-valid-values? form in]))}, blank-form {:protocol-inline nil, :meta {:file "file:/Users/woot15/.m2/repository/expound/expound/0.3.1/expound-0.3.1.jar!/expound/problems.cljc", :line 8, :column 7, :end-line 8, :end-column 17, :arglists (quote ([form]))}, :name expound.problems/blank-form, :variadic false, :file "file:/Users/woot15/.m2/repository/expound/expound/0.3.1/expound-0.3.1.jar!/expound/problems.cljc", :end-column 17, :method-params ([form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 1, :fn-var true, :arglists (quote ([form]))}, add-caller {:protocol-inline nil, :meta {:file "file:/Users/woot15/.m2/repository/expound/expound/0.3.1/expound-0.3.1.jar!/expound/problems.cljc", :line 82, :column 7, :end-line 82, :end-column 17, :arglists (quote ([explain-data]))}, :name expound.problems/add-caller, :variadic false, :file "file:/Users/woot15/.m2/repository/expound/expound/0.3.1/expound-0.3.1.jar!/expound/problems.cljc", :end-column 17, :method-params ([explain-data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 82, :end-line 82, :max-fixed-arity 1, :fn-var true, :arglists (quote ([explain-data]))}}, :cljs.spec/registry-ref [[expound.problems/summary-form (cljs.spec.alpha/fspec :args (s/cat :show-valid-valids? cljs.core/boolean? :form cljs.core/any? :highlighted-path :expound/path))]], :require-macros nil, :cljs.analyzer/constants {:seen #{:args :cljs.spec.alpha/failure :path :expound/problems cljs.core/boolean? :highlighted-path :cljs.spec.alpha/value :instrument :show-valid-valids? :key :else :expound.problems/kv-relevant :expound/form :expound/caller :cljs.spec.alpha/spec cljs.spec.alpha/fspec :val :expound.problems/irrelevant :cljs.spec.alpha/problems :spec :show-valid-values? :expound/path :expound/in :cljs.spec.alpha/args :form :idx s/cat :cljs.spec.alpha/fn ... :expound.problems/relevant :clojure.spec.test.alpha/caller :orchestra.spec.test/caller cljs.core/any? expound.problems/summary-form :in :cljs.spec.alpha/ret}, :order [:expound.problems/irrelevant :else expound.problems/summary-form cljs.spec.alpha/fspec :args s/cat :show-valid-valids? cljs.core/boolean? :form cljs.core/any? :highlighted-path :expound/path :expound.problems/relevant :key :idx :expound/in :val :in :instrument :path :spec :cljs.spec.alpha/problems :cljs.spec.alpha/value :cljs.spec.alpha/args :cljs.spec.alpha/ret :cljs.spec.alpha/fn :cljs.spec.alpha/failure :cljs.spec.alpha/spec :clojure.spec.test.alpha/caller :orchestra.spec.test/caller :expound/form :expound/caller :expound/problems :show-valid-values? :expound.problems/kv-relevant ...]}, :doc nil}