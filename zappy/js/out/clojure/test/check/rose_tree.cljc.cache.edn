{:rename-macros {}, :renames {}, :externs {Error {}, Infinity {}}, :use-macros {}, :excludes #{seq remove filter}, :name clojure.test.check.rose-tree, :imports nil, :requires {core cljs.core, cljs.core cljs.core}, :cljs.spec/speced-vars [], :uses nil, :defs {bifurcate {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/rose_tree.cljc", :line 139, :column 17, :end-line 139, :end-column 26, :private true, :arglists (quote ([f roses])), :doc "Returns a sequence of rose trees representing shrinks that discard\n  half of the vector of roses."}, :private true, :name clojure.test.check.rose-tree/bifurcate, :variadic false, :file "resources/public/js/out/clojure/test/check/rose_tree.cljc", :end-column 26, :method-params ([f roses]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 139, :end-line 139, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f roses])), :doc "Returns a sequence of rose trees representing shrinks that discard\n  half of the vector of roses."}, seq {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/rose_tree.cljc", :line 185, :column 7, :end-line 185, :end-column 10, :arglists (quote ([rose])), :doc "Create a lazy-seq of all of the (unique) nodes in a shrink-tree.\n  This assumes that two nodes with the same value have the same children.\n  While it's not common, it's possible to create trees that don't\n  fit that description. This function is significantly faster than\n  brute-force enumerating all of the nodes in a tree, as there will\n  be many duplicates."}, :name clojure.test.check.rose-tree/seq, :variadic false, :file "resources/public/js/out/clojure/test/check/rose_tree.cljc", :end-column 10, :method-params ([rose]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 185, :end-line 185, :max-fixed-arity 1, :fn-var true, :arglists (quote ([rose])), :doc "Create a lazy-seq of all of the (unique) nodes in a shrink-tree.\n  This assumes that two nodes with the same value have the same children.\n  While it's not common, it's possible to create trees that don't\n  fit that description. This function is significantly faster than\n  brute-force enumerating all of the nodes in a tree, as there will\n  be many duplicates."}, pure {:no-doc true, :protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/rose_tree.cljc", :line 67, :column 7, :end-line 67, :end-column 11, :arglists (quote ([x])), :doc "Puts a value `x` into a Rose tree, with no children.", :no-doc true}, :name clojure.test.check.rose-tree/pure, :variadic false, :file "resources/public/js/out/clojure/test/check/rose_tree.cljc", :end-column 11, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Puts a value `x` into a Rose tree, with no children."}, ->RoseTree {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/rose_tree.cljc", :line 15, :column 10, :end-line 15, :end-column 18, :protocols #{cljs.core/IIndexed}, :skip-protocol-flag #{cljs.core/IIndexed}, :factory :positional, :arglists (quote ([root children]))}, :protocols #{cljs.core/IIndexed}, :name clojure.test.check.rose-tree/->RoseTree, :variadic false, :file "resources/public/js/out/clojure/test/check/rose_tree.cljc", :end-column 18, :method-params ([root children]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 15, :end-line 15, :max-fixed-arity 2, :fn-var true, :arglists (quote ([root children])), :skip-protocol-flag #{cljs.core/IIndexed}}, make-stack {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/rose_tree.cljc", :line 179, :column 8, :end-line 179, :end-column 18, :private true, :arglists (quote ([children stack]))}, :private true, :name clojure.test.check.rose-tree/make-stack, :variadic false, :file "resources/public/js/out/clojure/test/check/rose_tree.cljc", :end-column 18, :method-params ([children stack]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 179, :end-line 179, :max-fixed-arity 2, :fn-var true, :arglists (quote ([children stack]))}, join {:no-doc true, :protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/rose_tree.cljc", :line 55, :column 7, :end-line 55, :end-column 11, :arglists (quote ([rose])), :doc "Turn a tree of trees into a single tree. Does this by concatenating\n  children of the inner and outer trees.", :no-doc true}, :name clojure.test.check.rose-tree/join, :variadic false, :file "resources/public/js/out/clojure/test/check/rose_tree.cljc", :end-column 11, :method-params ([rose]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 1, :fn-var true, :arglists (quote ([rose])), :doc "Turn a tree of trees into a single tree. Does this by concatenating\n  children of the inner and outer trees."}, bind {:no-doc true, :protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/rose_tree.cljc", :line 79, :column 7, :end-line 79, :end-column 11, :arglists (quote ([m k])), :doc "Takes a Rose tree (m) and a function (k) from\n  values to Rose tree and returns a new Rose tree.\n  This is the monadic bind (>>=) for Rose trees.", :no-doc true}, :name clojure.test.check.rose-tree/bind, :variadic false, :file "resources/public/js/out/clojure/test/check/rose_tree.cljc", :end-column 11, :method-params ([m k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :end-line 79, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m k])), :doc "Takes a Rose tree (m) and a function (k) from\n  values to Rose tree and returns a new Rose tree.\n  This is the monadic bind (>>=) for Rose trees."}, children {:no-doc true, :protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/rose_tree.cljc", :line 35, :column 7, :end-line 35, :end-column 15, :arglists (quote ([rose])), :doc "Returns the children of the root of the Rose tree.", :no-doc true}, :name clojure.test.check.rose-tree/children, :variadic false, :file "resources/public/js/out/clojure/test/check/rose_tree.cljc", :end-column 15, :method-params ([rose]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 1, :fn-var true, :arglists (quote ([rose])), :doc "Returns the children of the root of the Rose tree."}, exclude-nth {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/rose_tree.cljc", :line 45, :column 8, :end-line 45, :end-column 19, :private true, :arglists (quote ([n coll])), :doc "Exclude the nth value in a collection."}, :private true, :name clojure.test.check.rose-tree/exclude-nth, :variadic false, :file "resources/public/js/out/clojure/test/check/rose_tree.cljc", :end-column 19, :method-params ([n coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 2, :fn-var true, :arglists (quote ([n coll])), :doc "Exclude the nth value in a collection."}, remove {:no-doc true, :protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/rose_tree.cljc", :line 115, :column 7, :end-line 115, :end-column 13, :arglists (quote ([roses])), :no-doc true}, :name clojure.test.check.rose-tree/remove, :variadic false, :file "resources/public/js/out/clojure/test/check/rose_tree.cljc", :end-column 13, :method-params ([roses]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 115, :end-line 115, :max-fixed-arity 1, :fn-var true, :arglists (quote ([roses]))}, permutations {:no-doc true, :protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/rose_tree.cljc", :line 97, :column 7, :end-line 97, :end-column 19, :arglists (quote ([roses])), :doc "Create a seq of vectors, where each rose in turn, has been replaced\n  by its children.", :no-doc true}, :name clojure.test.check.rose-tree/permutations, :variadic false, :file "resources/public/js/out/clojure/test/check/rose_tree.cljc", :end-column 19, :method-params ([roses]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 97, :end-line 97, :max-fixed-arity 1, :fn-var true, :arglists (quote ([roses])), :doc "Create a seq of vectors, where each rose in turn, has been replaced\n  by its children."}, RoseTree {:num-fields 2, :protocols #{cljs.core/IIndexed}, :name clojure.test.check.rose-tree/RoseTree, :file "resources/public/js/out/clojure/test/check/rose_tree.cljc", :end-column 18, :type true, :column 10, :line 15, :record false, :end-line 15, :skip-protocol-flag #{cljs.core/IIndexed}}, shrink {:no-doc true, :protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/rose_tree.cljc", :line 129, :column 7, :end-line 129, :end-column 13, :arglists (quote ([f roses])), :no-doc true}, :name clojure.test.check.rose-tree/shrink, :variadic false, :file "resources/public/js/out/clojure/test/check/rose_tree.cljc", :end-column 13, :method-params ([f roses]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 129, :end-line 129, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f roses]))}, shrink-vector* {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/rose_tree.cljc", :line 151, :column 17, :end-line 151, :end-column 31, :private true, :arglists (quote ([f roses]))}, :private true, :name clojure.test.check.rose-tree/shrink-vector*, :variadic false, :file "resources/public/js/out/clojure/test/check/rose_tree.cljc", :end-column 31, :method-params ([f roses]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 151, :end-line 151, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f roses]))}, make-rose {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/rose_tree.cljc", :line 41, :column 7, :end-line 41, :end-column 16, :arglists (quote ([root children]))}, :name clojure.test.check.rose-tree/make-rose, :variadic false, :file "resources/public/js/out/clojure/test/check/rose_tree.cljc", :end-column 16, :method-params ([root children]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 2, :fn-var true, :arglists (quote ([root children]))}, filter {:no-doc true, :protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/rose_tree.cljc", :line 87, :column 7, :end-line 87, :end-column 13, :arglists (quote ([pred rose])), :doc "Returns a new Rose tree whose values pass `pred`. Values who\n  do not pass `pred` have their children cut out as well.\n  Takes a list of roses, not a rose", :no-doc true}, :name clojure.test.check.rose-tree/filter, :variadic false, :file "resources/public/js/out/clojure/test/check/rose_tree.cljc", :end-column 13, :method-params ([pred rose]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pred rose])), :doc "Returns a new Rose tree whose values pass `pred`. Values who\n  do not pass `pred` have their children cut out as well.\n  Takes a list of roses, not a rose"}, root {:no-doc true, :protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/rose_tree.cljc", :line 29, :column 7, :end-line 29, :end-column 11, :arglists (quote ([rose])), :doc "Returns the root of a Rose tree.", :no-doc true}, :name clojure.test.check.rose-tree/root, :variadic false, :file "resources/public/js/out/clojure/test/check/rose_tree.cljc", :end-column 11, :method-params ([rose]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 1, :fn-var true, :arglists (quote ([rose])), :doc "Returns the root of a Rose tree."}, shrink-vector {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/rose_tree.cljc", :line 157, :column 7, :end-line 157, :end-column 20, :arglists (quote ([f roses]))}, :name clojure.test.check.rose-tree/shrink-vector, :variadic false, :file "resources/public/js/out/clojure/test/check/rose_tree.cljc", :end-column 20, :method-params ([f roses]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 157, :end-line 157, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f roses]))}, zip {:no-doc true, :protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/rose_tree.cljc", :line 106, :column 7, :end-line 106, :end-column 10, :arglists (quote ([f roses])), :doc "Apply `f` to the sequence of Rose trees `roses`.", :no-doc true}, :name clojure.test.check.rose-tree/zip, :variadic false, :file "resources/public/js/out/clojure/test/check/rose_tree.cljc", :end-column 10, :method-params ([f roses]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 106, :end-line 106, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f roses])), :doc "Apply `f` to the sequence of Rose trees `roses`."}, fmap {:no-doc true, :protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/rose_tree.cljc", :line 73, :column 7, :end-line 73, :end-column 11, :arglists (quote ([f rose])), :doc "Applies functions `f` to all values in the tree.", :no-doc true}, :name clojure.test.check.rose-tree/fmap, :variadic false, :file "resources/public/js/out/clojure/test/check/rose_tree.cljc", :end-column 11, :method-params ([f rose]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f rose])), :doc "Applies functions `f` to all values in the tree."}, unchunk {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/rose_tree.cljc", :line 122, :column 17, :end-line 122, :end-column 24, :private true, :arglists (quote ([a-lazy-seq])), :doc "Returns an equivalent lazy seq that is not chunked."}, :private true, :name clojure.test.check.rose-tree/unchunk, :variadic false, :file "resources/public/js/out/clojure/test/check/rose_tree.cljc", :end-column 24, :method-params ([a-lazy-seq]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 122, :end-line 122, :max-fixed-arity 1, :fn-var true, :arglists (quote ([a-lazy-seq])), :doc "Returns an equivalent lazy seq that is not chunked."}, collapse {:no-doc true, :protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/rose_tree.cljc", :line 167, :column 7, :end-line 167, :end-column 15, :arglists (quote ([rose])), :doc "Return a new rose-tree whose depth-one children\n  are the children from depth one _and_ two of the input\n  tree.", :no-doc true}, :name clojure.test.check.rose-tree/collapse, :variadic false, :file "resources/public/js/out/clojure/test/check/rose_tree.cljc", :end-column 15, :method-params ([rose]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 167, :end-line 167, :max-fixed-arity 1, :fn-var true, :arglists (quote ([rose])), :doc "Return a new rose-tree whose depth-one children\n  are the children from depth one _and_ two of the input\n  tree."}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{:else children root}, :order [:else root children]}, :doc "A lazy tree data structure used for shrinking."}