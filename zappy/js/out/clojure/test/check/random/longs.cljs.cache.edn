{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{bit-count bit-xor unsigned-bit-shift-right * bit-or +}, :name clojure.test.check.random.longs, :imports nil, :requires {bit-count clojure.test.check.random.longs.bit-count-impl, clojure.test.check.random.longs.bit-count-impl clojure.test.check.random.longs.bit-count-impl, long goog.math.Long, goog.math.Long goog.math.Long}, :cljs.spec/speced-vars [], :uses nil, :defs {from-number {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/random/longs.cljs", :line 42, :column 7, :end-line 42, :end-column 18, :arglists (quote ([x]))}, :name clojure.test.check.random.longs/from-number, :variadic false, :file "resources/public/js/out/clojure/test/check/random/longs.cljs", :end-column 18, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, bit-count {:name clojure.test.check.random.longs/bit-count, :file "resources/public/js/out/clojure/test/check/random/longs.cljs", :line 57, :column 1, :end-line 57, :end-column 15, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/random/longs.cljs", :line 57, :column 6, :end-line 57, :end-column 15}}, bit-xor {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/random/longs.cljs", :line 30, :column 7, :end-line 30, :end-column 14, :arglists (quote ([x y]))}, :name clojure.test.check.random.longs/bit-xor, :variadic false, :file "resources/public/js/out/clojure/test/check/random/longs.cljs", :end-column 14, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y]))}, unsigned-bit-shift-right {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/random/longs.cljs", :line 18, :column 7, :end-line 18, :end-column 31, :arglists (quote ([x n]))}, :name clojure.test.check.random.longs/unsigned-bit-shift-right, :variadic false, :file "resources/public/js/out/clojure/test/check/random/longs.cljs", :end-column 31, :method-params ([x n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x n]))}, * {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/random/longs.cljs", :line 26, :column 7, :end-line 26, :end-column 8, :arglists (quote ([x y]))}, :name clojure.test.check.random.longs/*, :variadic false, :file "resources/public/js/out/clojure/test/check/random/longs.cljs", :end-column 8, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y]))}, from-string {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/random/longs.cljs", :line 38, :column 7, :end-line 38, :end-column 18, :arglists (quote ([s radix]))}, :name clojure.test.check.random.longs/from-string, :variadic false, :file "resources/public/js/out/clojure/test/check/random/longs.cljs", :end-column 18, :method-params ([s radix]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s radix]))}, ->long {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/random/longs.cljs", :line 46, :column 7, :end-line 46, :end-column 13, :arglists (quote ([x])), :doc "Coerces to long, or returns nil if not possible."}, :name clojure.test.check.random.longs/->long, :variadic false, :file "resources/public/js/out/clojure/test/check/random/longs.cljs", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Coerces to long, or returns nil if not possible."}, bit-or {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/random/longs.cljs", :line 34, :column 7, :end-line 34, :end-column 13, :arglists (quote ([x y]))}, :name clojure.test.check.random.longs/bit-or, :variadic false, :file "resources/public/js/out/clojure/test/check/random/longs.cljs", :end-column 13, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y]))}, ONE {:name clojure.test.check.random.longs/ONE, :file "resources/public/js/out/clojure/test/check/random/longs.cljs", :line 55, :column 1, :end-line 55, :end-column 9, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/random/longs.cljs", :line 55, :column 6, :end-line 55, :end-column 9}, :tag any}, + {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/random/longs.cljs", :line 22, :column 7, :end-line 22, :end-column 8, :arglists (quote ([x y]))}, :name clojure.test.check.random.longs/+, :variadic false, :file "resources/public/js/out/clojure/test/check/random/longs.cljs", :end-column 8, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y]))}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "Internal namespace, wrapping some goog.math.Long functionality."}