{:rename-macros {}, :renames {}, :externs {Error {}}, :use-macros {}, :excludes #{}, :name clojure.test.check.properties, :imports nil, :requires {gen clojure.test.check.generators, clojure.test.check.generators clojure.test.check.generators, results clojure.test.check.results, clojure.test.check.results clojure.test.check.results}, :cljs.spec/speced-vars [], :uses nil, :defs {ErrorResult {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta clojure.test.check.results/Result cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name clojure.test.check.properties/ErrorResult, :file "resources/public/js/out/clojure/test/check/properties.cljc", :end-column 23, :type true, :column 12, :internal-ctor true, :line 14, :record true, :end-line 14, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ->ErrorResult {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/properties.cljc", :line 14, :column 12, :end-line 14, :end-column 23, :internal-ctor true, :factory :positional, :arglists (quote ([error]))}, :name clojure.test.check.properties/->ErrorResult, :variadic false, :file "resources/public/js/out/clojure/test/check/properties.cljc", :end-column 23, :method-params ([error]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 14, :end-line 14, :max-fixed-arity 1, :fn-var true, :arglists (quote ([error]))}, map->ErrorResult {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/properties.cljc", :line 14, :column 12, :end-line 14, :end-column 23, :internal-ctor true, :factory :map, :arglists (quote ([G__48607]))}, :name clojure.test.check.properties/map->ErrorResult, :variadic false, :file "resources/public/js/out/clojure/test/check/properties.cljc", :end-column 23, :method-params ([G__48607]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 14, :end-line 14, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__48607]))}, exception? {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/properties.cljc", :line 22, :column 17, :end-line 22, :end-column 27, :private true, :arglists (quote ([x]))}, :private true, :name clojure.test.check.properties/exception?, :variadic false, :file "resources/public/js/out/clojure/test/check/properties.cljc", :end-column 27, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, apply-gen {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/properties.cljc", :line 26, :column 17, :end-line 26, :end-column 26, :private true, :arglists (quote ([function]))}, :private true, :name clojure.test.check.properties/apply-gen, :variadic false, :file "resources/public/js/out/clojure/test/check/properties.cljc", :end-column 26, :method-params ([function]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 1, :fn-var true, :arglists (quote ([function]))}, for-all* {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/properties.cljc", :line 44, :column 7, :end-line 44, :end-column 15, :arglists (quote ([args function])), :doc "Creates a property (properties are also generators). A property\n  is a generator that generates the result of applying the function\n  under test with the realized arguments. Once realized, the arguments\n  will be applied to `function` with `apply`.\n\n  Example:\n\n  (for-all* [gen/int gen/int] (fn [a b] (>= (+ a b) a)))\n  "}, :name clojure.test.check.properties/for-all*, :variadic false, :file "resources/public/js/out/clojure/test/check/properties.cljc", :end-column 15, :method-params ([args function]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 2, :fn-var true, :arglists (quote ([args function])), :doc "Creates a property (properties are also generators). A property\n  is a generator that generates the result of applying the function\n  under test with the realized arguments. Once realized, the arguments\n  will be applied to `function` with `apply`.\n\n  Example:\n\n  (for-all* [gen/int gen/int] (fn [a b] (>= (+ a b) a)))\n  "}, binding-vars {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/properties.cljc", :line 59, :column 8, :end-line 59, :end-column 20, :private true, :arglists (quote ([bindings]))}, :private true, :name clojure.test.check.properties/binding-vars, :variadic false, :file "resources/public/js/out/clojure/test/check/properties.cljc", :end-column 20, :method-params ([bindings]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 1, :fn-var true, :arglists (quote ([bindings]))}, binding-gens {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/properties.cljc", :line 63, :column 8, :end-line 63, :end-column 20, :private true, :arglists (quote ([bindings]))}, :private true, :name clojure.test.check.properties/binding-gens, :variadic false, :file "resources/public/js/out/clojure/test/check/properties.cljc", :end-column 20, :method-params ([bindings]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 1, :fn-var true, :arglists (quote ([bindings]))}, for-all {:protocol-inline nil, :meta {:file "/Users/woot15/Desktop/Dropbox/My_Projects/20171218_PlantGame/plantgame/plantboss/resources/public/js/out/clojure/test/check/properties.cljc", :line 67, :column 11, :end-line 67, :end-column 18, :macro true, :arglists (quote ([bindings & body])), :doc "Macro sugar for `for-all*`. `for-all` lets you name the parameter\n  and use them in expression, without wrapping them in a lambda. Like\n  `for-all*`, it returns a property.\n\n  Examples\n\n  (for-all [a gen/int\n            b gen/int]\n    (>= (+ a b) a))\n  ", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}}, :name clojure.test.check.properties/for-all, :variadic true, :file "resources/public/js/out/clojure/test/check/properties.cljc", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}, :method-params [(&form &env bindings body)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 67, :macro true, :end-line 67, :max-fixed-arity 3, :fn-var false, :arglists ([&form &env bindings & body]), :doc "Macro sugar for `for-all*`. `for-all` lets you name the parameter\n  and use them in expression, without wrapping them in a lambda. Like\n  `for-all*`, it returns a property.\n\n  Examples\n\n  (for-all [a gen/int\n            b gen/int]\n    (>= (+ a b) a))\n  "}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{:args :clojure.test.check.properties/error clojure.test.check.properties/for-all* :function :result cljs.core/fn :error error}, :order [:error :clojure.test.check.properties/error error :result :function :args clojure.test.check.properties/for-all* cljs.core/fn]}, :doc nil}